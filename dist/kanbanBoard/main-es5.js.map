{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/multiuser/friend-list/friend-list.component.ts","webpack:///src/app/multiuser/friend-list/friend-list.component.html","webpack:///src/app/multiuser/multi-user.service.ts","webpack:///src/app/multiuser/multiuser.module.ts","webpack:///src/app/multiuser/online-users/online-users.component.ts","webpack:///src/app/multiuser/online-users/online-users.component.html","webpack:///src/app/not-found/not-found.component.ts","webpack:///src/app/not-found/not-found.component.html","webpack:///src/app/shared/create-task/create-task.component.ts","webpack:///src/app/shared/create-task/create-task.component.html","webpack:///src/app/shared/edit-task/edit-task.component.ts","webpack:///src/app/shared/edit-task/edit-task.component.html","webpack:///src/app/shared/shared.module.ts","webpack:///src/app/task/router-guard.service.ts","webpack:///src/app/task/subtasks/subtasks.component.ts","webpack:///src/app/task/subtasks/subtasks.component.html","webpack:///src/app/task/task.module.ts","webpack:///src/app/task/tasklist.service.ts","webpack:///src/app/task/tasklist/tasklist.component.ts","webpack:///src/app/task/tasklist/tasklist.component.html","webpack:///src/app/task/tasks/tasks.component.ts","webpack:///src/app/task/tasks/tasks.component.html","webpack:///src/app/user/login/login.component.ts","webpack:///src/app/user/login/login.component.html","webpack:///src/app/user/recoverpassword/recoverpassword.component.ts","webpack:///src/app/user/recoverpassword/recoverpassword.component.html","webpack:///src/app/user/signup/signup.component.ts","webpack:///src/app/user/signup/signup.component.html","webpack:///src/app/user/user.module.ts","webpack:///src/app/user/user.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///ws (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","duration","type","autoClose","position","declarations","providers","bootstrap","HomeComponent","FriendListComponent","multiUserService","_toaster","friends","selectedFriend","reloadTaskList","resultList","friendsList","friendListObj","pendingFriendLists","toApproveRequest","rejectedLists","authToken","get","console","debug","getFriends","getFriendRequestList","fRequestUpdateListener","friendlyUpdatesListener","autheticateUser","subscribe","data","setUser","user","senderId","userId","getFriendRequests","response","status","emit","refineLists","error","map","includes","push","recieverName","recieverId","senderName","filter","usr","getUpdatedFriendList","request","action","updatedFriendRequest","updateFriendRequest","setTimeout","friendRequestAction","updatedRequest","uniqueCombination","open","text","friend","toastString","friendList","friendlyTaskUpdates","updates","length","fr","MultiUserService","_http","userService","socketUrl","apiBaseUrl","httpHeaderOptions","headers","getAutheticatedUserInfo","create","observer","socket","on","next","getOnlineUserList","disconnectUser","localStorage","clear","sendFriendRequest","friendRequest","recieveFriendRequest","observable","multiplex","message","post","friendlist","complete","providedIn","MultiuserModule","OnlineUsersComponent","usersFriend","onlineUsers","isFriend","getOnlineUsersList","recieveFriendRequestByUserId","handeShakeAuthentication","users","d","onlineUsersList","username","NotFoundComponent","CreateTaskComponent","taskService","_toast","errorResponse","successResponse","notifyNewTaskList","notifyNewTask","notifyNewSubTask","closeModal","operationName","endsWith","taskInfo","taskListId","name","taskName","createTask","createNewtaskResponse","refreshUserId","flagOperationForFriend","loggedInUser","notification","notifyFriends","warn","taskId","createSubTask","taskListInfo","createTaskList","notifyFriendsForUpdates","EditTaskComponent","toggleTaskList","toggleTasks","toggleStatusSelection","selectedTaskList","notifyEditTaskList","notifyEditTask","notifyEditSubTask","statusOptions","selectTasks","selectTasksList","getAllTask","getTasks","list","selected","operation","update","selectedTask","updateTask","editTaskResponse","subTaskId","updateSubTask","updateTaskList","editTask","SharedModule","RouterGuardService","router","log","undefined","navigate","SubtasksComponent","edit","getAllSubTasks","getSubTasks","subtasks","newSubTask","TaskModule","canActivate","TasklistService","baseurl","taskListData","createTaskListRes","skip","allTaskLists","taskDetails","createTaskRes","taskData","allTasks","subTaskDetails","createSubTaskRes","allSubTasks","udpatedTask","subTaskInfo","TasklistComponent","taskListService","_router","modalService","taskLists","usersFriendList","toggleLoadMoreTasks","tasks","toggleOnlineUser","toggleFriendList","String","selectedFriendName","toggleBannerDisplay","flagDisplayingFriendsItem","firstName","lastName","selectedUserId","page","ev","metaKey","ctrlKey","key","startUndoProcess","getAllTaskList","onlineUser","content","ops","selectedTaskListId","selectedTaskId","ariaLabelledBy","result","closeResult","reason","selectedTaskName","split","selectedTaskStatus","selectedSubTaskId","userdata","getTaskLists","fetchedAlltaskLists","newTaskList","modal","values","openEdit","value","friendName","friendUserId","userInfo","revertLatestChange","currentTaskList","userLogout","showLoggedInUsersTask","showOnlineUsers","showFriendList","setOnlineUsers","setFriendList","getFriendsItems","reloadFriendlyUpdates","loadMoreTaskList","read","TasksComponent","notify","editSTask","notifyForSTaskDelete","toggleCreateTaskForm","newTask","LoginComponent","toaster","userData","email","password","loginService","loginResponse","set","setAuthenticatedUser","loginUser","RecoverpasswordComponent","_userService","hideRecoveryDiv","equalPwd","acceptedPwd","loadSpinner","cfnpassword","pattern","RegExp","test","toString","loadMessage","recoverPassword","recoveryMessage","Operation","showResetPassword","resetInfo","recoveryCode","resetPassword","resetResponse","sendRecoveryCode","validatePassword","SignupComponent","countriesArray","countries","ctr","passwordError","Object","entries","entry","country","countrycode","search","phone","mobile","newuser","signUpService","signUpResponse","signUpUser","selectCountryCode","UserModule","forChild","UserService","newUser","signUpRes","loginres","setItem","JSON","stringify","lc","parse","getItem","recoverPwdRes","resetPwdRes","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './user/login/login.component';\nimport { SignupComponent } from './user/signup/signup.component';\nimport { HomeComponent } from './home/home.component';\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { TasklistComponent } from './task/tasklist/tasklist.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/home', pathMatch: 'full' },\n  { path: 'login', component: LoginComponent, pathMatch: 'full' },\n  { path: 'signup', component: SignupComponent, pathMatch: 'full' },\n  { path: 'home', component: HomeComponent, pathMatch: 'full' },\n  { path: '404', component: NotFoundComponent },\n  { path: 'taskList', component: TasklistComponent, pathMatch: 'full' },\n  { path: '**', redirectTo: '/404' },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  title = 'kanbanBoard';\n  constructor() {}\n}\n","<div class=\"container-sm\">\n  <nav class=\"navbar sticky-top navbar-expand-lg navbar-light title heading\">\n    <button\n      class=\"navbar-toggler\"\n      type=\"button\"\n      data-toggle=\"collapse\"\n      data-target=\"#navbarTogglerDemo01\"\n      aria-controls=\"navbarTogglerDemo01\"\n      aria-expanded=\"false\"\n      aria-label=\"Toggle navigation\"\n    >\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\n      <a class=\"navbar-brand\" href=\"/\">\n        <img\n          src=\"assets/todo.png\"\n          width=\"40\"\n          height=\"40\"\n          class=\"d-inline-block align-top\"\n          alt=\"\"\n        />\n        KanbanBoard\n      </a>\n    </div>\n  </nav>\n</div>\n\n<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport '@angular/compiler';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { UserModule } from './user/user.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ToastNotificationsModule } from 'ngx-toast-notifications';\nimport { TaskModule } from './task/task.module';\nimport { SharedModule } from './shared/shared.module';\nimport { FormsModule } from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { MultiuserModule } from './multiuser/multiuser.module';\nimport { NotFoundComponent } from './not-found/not-found.component';\n\n@NgModule({\n  declarations: [AppComponent, HomeComponent, NotFoundComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    UserModule,\n    TaskModule,\n    SharedModule,\n    NgbModule,\n    FormsModule,\n    MultiuserModule,\n    BrowserAnimationsModule,\n    ToastNotificationsModule.forRoot({\n      duration: 3500,\n      type: 'primary',\n      autoClose: true,\n      position: 'top-right',\n    }),\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css'],\n})\nexport class HomeComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div class=\"container\">\n  <div class=\"introduction\">\n    <p>\n      Welcome to KanbanBoard,A perfect way to manage Your tasks in a shared way\n      with your peers and friends. Let's get Started\n    </p>\n    <button [routerLink]=\"['/login']\">Login</button>\n    <button [routerLink]=\"['/signup']\" class=\"ml-4\">SignUp</button>\n  </div>\n</div>\n<router-outlet></router-outlet>\n","import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  OnDestroy,\n} from '@angular/core';\nimport { MultiUserService } from '../multi-user.service';\nimport { Cookie } from 'ng2-cookies';\nimport { ToastConfig, Toaster } from 'ngx-toast-notifications';\n\n@Component({\n  selector: 'app-friend-list',\n  templateUrl: './friend-list.component.html',\n  styleUrls: ['./friend-list.component.css'],\n})\nexport class FriendListComponent implements OnInit, OnDestroy {\n  @Input() userId: any;\n  @Input() username: any;\n  @Output()\n  friends: EventEmitter<any> = new EventEmitter<any>();\n  @Output()\n  selectedFriend: EventEmitter<any> = new EventEmitter<any>();\n  @Output()\n  reloadTaskList: EventEmitter<any> = new EventEmitter<any>();\n\n  private authToken: String;\n  public resultList: any = [];\n  public friendsList: any = []; //status -accepted\n  public friendListObj: any = []; //for selection purpose\n  public pendingFriendLists: any = []; //status --pending\n  public toApproveRequest: any = []; //status --pending && recieverId==this.userId\n  public rejectedLists: any = []; //status --rejected\n\n  constructor(\n    private multiUserService: MultiUserService,\n    private _toaster: Toaster\n  ) {\n    this.authToken = Cookie.get('authToken');\n  }\n\n  ngOnInit(): void {\n    console.debug('NGINIT_______FRIENDLIST');\n    /**get friend list on user's login */\n    this.getFriends();\n    /**listen for any friend request made */\n    this.getFriendRequestList();\n    /**listen for any approval/rejection for this user */\n    this.fRequestUpdateListener();\n    /**listen for any updates made by friends */\n    this.friendlyUpdatesListener();\n  }\n  ngOnDestroy(): void {}\n  public handeShakeAuthentication(): any {\n    console.debug('listen to hand shake');\n    this.multiUserService.autheticateUser().subscribe((data) => {\n      this.multiUserService.setUser(this.authToken);\n      this.getFriends();\n    });\n  }\n  /**get friend list by API end point */\n  public getFriends(): any {\n    //console.debug('get online users list', this.userId);\n    let user = {\n      senderId: this.userId,\n    };\n    this.multiUserService.getFriendRequests(user).subscribe(\n      (response) => {\n        //console.debug('friend reques::', response.message);\n        //console.debug('friend reques::', typeof response.data);\n\n        if (response.status === 200) {\n          this.resultList = response.data;\n          this.friends.emit(response.data);\n          this.refineLists(this.resultList);\n        }\n      },\n      (error) => {\n        console.error('Error::', error.error);\n      }\n    );\n  }\n  /**compute different type of friend list */\n  public refineLists(friends): any {\n    //console.debug('refining list:: for different groups', friends);\n    friends.map((req) => {\n      switch (req.status) {\n        case 'pending':\n          /**compute pending list based when user id the sender and include onle once */\n          if (\n            req.senderId == this.userId &&\n            !this.pendingFriendLists.includes(req.senderId)\n          ) {\n            this.pendingFriendLists.push(req);\n          }\n          /**compute the approval list for pending req and later filter\n           * based on when the user is the reciever of the request Line NO(101)\n           */\n          this.toApproveRequest.push(req);\n          break;\n        case 'accepted':\n          /**include id for openFriendsItem */\n          if (req.senderId === this.userId) {\n            this.friendsList.push(`${req.recieverName}:${req.recieverId}`);\n          }\n          if (\n            req.recieverId === this.userId &&\n            !this.friendsList.includes(req.senderName)\n          ) {\n            this.friendsList.push(`${req.senderName}:${req.senderId}`);\n            this.friendListObj.push(req);\n          }\n      }\n    });\n    /**filter approval list\n     * based on when the user is the reciever of the request Line NO\n     */\n    this.toApproveRequest = this.toApproveRequest.filter(\n      (usr) => usr.recieverId == this.userId\n    );\n    //console.debug('to approve list::', this.toApproveRequest);\n    //console.debug('friend list::', this.friendsList);\n  }\n  /**listen for any friend request made for this user and update the friend list */\n  public getFriendRequestList(): any {\n    this.multiUserService.getUpdatedFriendList().subscribe((data) => {\n      /**updated the existing friend's list after any request is added or approved*/\n      this.getFriends();\n    });\n  }\n  /**approve/reject friend request */\n  public updateFRequest(request, action): any {\n    //console.debug('Clicked updateFRequest:', action);\n    let updatedFriendRequest = { ...request, status: action };\n    /**emit the updated request */\n    this.multiUserService.updateFriendRequest(updatedFriendRequest);\n    /**call for updated friend list API */\n    setTimeout(() => this.getFriends(), 1200);\n  }\n\n  /**listen for updated approval & rejection if it's for this userID */\n  public fRequestUpdateListener(): any {\n    this.multiUserService.friendRequestAction().subscribe((updatedRequest) => {\n      const {\n        recieverId,\n        recieverName,\n        senderId,\n        senderName,\n        status,\n        uniqueCombination,\n      } = updatedRequest;\n      /**if senderId is this userId , this request is meant for self\n       * take action accordingly\n       */\n      if (senderId === this.userId) {\n        /**toast approval/rejection */\n        this._toaster.open({\n          text: `${recieverName} ${status} your request`,\n          type: status === 'accepted' ? 'success' : 'dark',\n        });\n        /**refine current pendinglist based on current action(accepted/rejected) */\n        if (status === 'accepted') {\n          this.pendingFriendLists = this.pendingFriendLists.filter((req) => {\n            req.senderId === senderId;\n          });\n        }\n      }\n      if (recieverId === this.userId && status === 'accepted') {\n        /**toast approver for success */\n        this._toaster.open({\n          text: `${senderName} is now your friend`,\n          type: 'success',\n        });\n        /**clean up approval list for this request on client side*/\n        this.toApproveRequest = this.toApproveRequest.filter((req) => {\n          req.senderId === senderId;\n        });\n      }\n      /**get the updated friendlist from server*/\n      this.getFriends();\n    });\n  }\n  /**Invoke addition to friendsItem  */\n  public openFriendsItem(friend): any {\n    console.debug('friend::', friend);\n    this.selectedFriend.emit(friend);\n  }\n  /**listener for friendly task updates */\n  public friendlyUpdatesListener(): any {\n    let toastString;\n    let friendList = [];\n    console.debug('Friendly task updates');\n    this.multiUserService.friendlyTaskUpdates().subscribe((updates) => {\n      console.debug('updates listener::', updates);\n      if (typeof updates === 'string') {\n        toastString = updates;\n        console.debug('toast string::', toastString);\n      } else {\n        friendList = updates;\n        console.debug('friendlist::', updates);\n      }\n      console.debug('is friend::', friendList, this.userId);\n      if (friendList.length !== 0) {\n        friendList.map((fr) => {\n          if (fr !== null && fr === this.userId) {\n            console.debug('Found friend');\n            this._toaster.open({ text: toastString, type: 'dark' });\n            //emit reload tasklist event\n            console.debug(\"reloading task for  ,since it's a friend\");\n            setTimeout(() => this.reloadTaskList.emit(this.userId), 1400);\n          }\n        });\n      }\n    });\n  }\n}\n","<div>\n  <span class=\"badge badge-dark mt-2\">Friend Requests</span>\n  <ul class=\"list-group-flush list-group-item-light onlineUsers\">\n    <li class=\"list-group-item\" *ngFor=\"let friend of pendingFriendLists\">\n      {{ friend.recieverName }}\n      <span class=\"badge badge-pill badge-primary ml-3\">{{\n        friend.status\n      }}</span>\n    </li>\n  </ul>\n  <span class=\"badge badge-success\">Friends</span>\n  <ul class=\"list-group-flush list-group-item-light onlineUsers\">\n    <li\n      class=\"list-group-item\"\n      *ngFor=\"let friend of friendsList\"\n      (click)=\"openFriendsItem(friend)\"\n    >\n      {{ friend.split(\":\")[0] }}\n    </li>\n  </ul>\n  <span class=\"badge badge-info\">Take Actions</span>\n  <ul class=\"list-group-flush list-group-item-light onlineUsers\">\n    <li class=\"list-group-item\" *ngFor=\"let friend of toApproveRequest\">\n      {{ friend.senderName }}\n      <button\n        class=\"btn btn-outline-dark btn-sm\"\n        (click)=\"updateFRequest(friend, 'accepted')\"\n      >\n        Approve</button\n      ><button\n        class=\"btn btn-outline-dark btn-sm ml-3\"\n        (click)=\"updateFRequest(friend, 'rejected')\"\n      >\n        Reject\n      </button>\n    </li>\n  </ul>\n</div>\n","import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpErrorResponse,\n  HttpHeaders,\n} from '@angular/common/http';\nimport { Observable, throwError, onErrorResumeNext, observable } from 'rxjs';\nimport * as io from 'socket.io-client';\nimport { UserService } from '../user/user.service';\n\nimport { Cookie } from 'ng2-cookies';\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiUserService {\n  private socketUrl = 'http://localhost:4201/multiusers';\n  private apiBaseUrl = 'http://localhost:4201/api/v1';\n  private authToken: any;\n  private socket;\n  constructor(private _http: HttpClient, private userService: UserService) {\n    /**init client socket */\n    this.socket = io(this.socketUrl, {\n      'auto connect': true,\n      'max reconnection attempts': 10,\n      multiplex: false,\n      'try multiple transports': true,\n    });\n  }\n  //handle exceptions\n  public handleError(error: HttpErrorResponse) {\n    console.debug('Http Error:', error.message);\n    return Observable.throw(error.message);\n  }\n  public httpHeaderOptions = {\n    headers: new HttpHeaders({\n      authToken: this.userService.getAutheticatedUserInfo().authToken,\n    }),\n  };\n  /**define listeners and emitters */\n  /**1: Listen to authentication handshake */\n  public autheticateUser = () => {\n    console.debug('Auth user listener');\n    return Observable.create((observer) => {\n      this.socket.on('authenticate', (data) => {\n        observer.next(data);\n      });\n    });\n  };\n  /**2 send/emit authToken for authentication */\n  public setUser = (authToken) => {\n    console.debug('Emmit user authentication');\n    this.socket.emit('set-user', authToken);\n  };\n  /**3 Get Online Userlist by listning to online-users broadcase */\n  public getOnlineUserList = () => {\n    //console.debug('get online user service');\n    return Observable.create((observer) => {\n      this.socket.on('online-users', (data) => {\n        observer.next(data);\n      });\n    });\n  };\n  /**emitt disconnect event with userId */\n  public disconnectUser = (userId) => {\n    //console.debug('Disconnecting user', userId);\n    this.socket.emit('disconnected', userId);\n    /**delete cookie and  localstorage*/\n    //console.debug('clearing localstorage and cookie');\n    localStorage.clear();\n    Cookie.delete('name');\n    Cookie.delete('authToken');\n    Cookie.delete('email');\n    Cookie.delete('userId');\n  };\n  /**emit friend request */\n  public sendFriendRequest = (friendRequest) => {\n    //console.debug('Send friend Request:');\n    this.socket.emit('sentFriendRequest', friendRequest);\n  };\n  /**listen for friend request */\n  public recieveFriendRequest = (recieverId) => {\n    return Observable.create((observable) => {\n      this.socket.on(recieverId, (data) => {\n        observable.next(data);\n      });\n    });\n  };\n  /**fetch friend requests */\n  public getFriendRequests(senderId): any {\n    return this._http.post(\n      `${this.apiBaseUrl}/getFriendRequests`,\n      senderId,\n      this.httpHeaderOptions\n    );\n  }\n  /**listen for friendsList */\n  public getUpdatedFriendList(): any {\n    return Observable.create((observable) => {\n      this.socket.on('friendlist-updates', (data) => {\n        observable.next(data);\n      });\n    });\n  }\n  /**emit request approve/rejection FR */\n  public updateFriendRequest = (friendRequest) => {\n    //console.debug('Emit actions on fr request');\n    this.socket.emit('update-friend-request', friendRequest);\n  };\n  /**listen for friend request approval/rejection for appropiate sender */\n  public friendRequestAction(): any {\n    /**here fr component will update and toast for approval\n     * or rejection & fr list updates based appropiate\n     * senderId (i.e if senderId is userId)\n     */\n    return Observable.create((observable) => {\n      this.socket.on('friend-request-updates', (data) => {\n        observable.next(data);\n      });\n    });\n  }\n  /**emit update notification to friends when any edit if\n   * performed 'updates' has What was updated by whom\n   */\n  public notifyFriendsForUpdates(updates, friendlist): any {\n    console.debug('emit notify friendly updates');\n    this.socket.emit('friend-updated-tasks', updates, friendlist);\n  }\n  /**listen for updates from friends and show notificationa\n   * and reload tasklist if userId is in Friend's list\n   */\n  public friendlyTaskUpdates(): any {\n    console.debug('friendly task updates');\n    return Observable.create((observable) => {\n      this.socket.on('updates-from-friend', (updates, friendList) => {\n        observable.next(updates);\n        observable.next(friendList);\n        observable.complete();\n      });\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FriendListComponent } from './friend-list/friend-list.component';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MultiUserService } from './multi-user.service';\nimport { OnlineUsersComponent } from './online-users/online-users.component';\n\n@NgModule({\n  declarations: [FriendListComponent, OnlineUsersComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    RouterModule.forRoot([\n      { path: 'friendlist', component: FriendListComponent, pathMatch: 'full' },\n    ]),\n  ],\n  exports: [FriendListComponent, OnlineUsersComponent],\n  providers: [MultiUserService],\n})\nexport class MultiuserModule {}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { MultiUserService } from '../multi-user.service';\nimport { Cookie } from 'ng2-cookies';\nimport { ToastConfig, Toaster } from 'ngx-toast-notifications';\n@Component({\n  selector: 'app-online-users',\n  templateUrl: './online-users.component.html',\n  styleUrls: ['./online-users.component.css'],\n})\nexport class OnlineUsersComponent implements OnInit {\n  @Input() userId: any;\n  @Input() username: any;\n  @Input() usersFriend: any = [];\n  @Output()\n  onlineUsers: EventEmitter<Array<Object>> = new EventEmitter<Array<Object>>();\n\n  private authToken: String;\n  public onlineUsersList: any[];\n  public isFriend: Boolean = true;\n  constructor(\n    private multiUserService: MultiUserService,\n    private _toaster: Toaster\n  ) {\n    this.authToken = Cookie.get('authToken');\n    /**keep listeners active */\n    this.getOnlineUsersList();\n    this.recieveFriendRequestByUserId();\n  }\n\n  ngOnInit(): void {\n    this.handeShakeAuthentication();\n    this.getOnlineUsersList();\n    this.recieveFriendRequestByUserId();\n  }\n\n  public handeShakeAuthentication(): any {\n    console.debug('listen to hand shake online compoenent');\n    this.multiUserService.autheticateUser().subscribe((data) => {\n      this.multiUserService.setUser(this.authToken);\n      this.getOnlineUsersList();\n    });\n  }\n  public getOnlineUsersList(): any {\n    //console.debug('get online users list');\n    this.multiUserService.getOnlineUserList().subscribe((data) => {\n      //console.debug('Online users from socket::', data);\n      /**filter out the current user */\n      let users = [];\n      data.map((d) => {\n        if (d.userId !== this.userId) {\n          users.push(d);\n        }\n      });\n      //console.debug('final list:', users);\n      this.onlineUsers.emit(users);\n      this.onlineUsersList = users;\n    });\n  }\n  public addFriend(userId, username): any {\n    //console.debug('Add friend start', userId);\n    /**to and from denotes friend request sent to and from user */\n    let friendList = {\n      recieverId: userId,\n      recieverName: username,\n      senderId: this.userId,\n      senderName: this.username,\n    };\n    this.multiUserService.sendFriendRequest(friendList);\n    //console.debug('fiendlist::', friendList);\n  }\n  public recieveFriendRequestByUserId(): any {\n    //console.debug('listen to friend request');\n    this.multiUserService\n      .recieveFriendRequest(this.userId)\n      .subscribe((data) => {\n        //console.debug('recieved friend request for ', data);\n        const { recieverId, recieverName, senderId, senderName } = data;\n        this._toaster.open({\n          text: `${senderName} sent you an friend request`,\n          type: 'success',\n        });\n      });\n  }\n}\n","<div>\n  <ul class=\"list-group-flush list-group-item-light onlineUsers\">\n    <li class=\"list-group-item\" *ngFor=\"let user of onlineUsersList\">\n      {{ user.name }}\n      <button\n        *ngIf=\"!usersFriend.includes(user.userId)\"\n        type=\"button\"\n        class=\"btn btn-light\"\n        (click)=\"addFriend(user.userId, user.name)\"\n      >\n        Add Friend\n      </button>\n    </li>\n  </ul>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"loginbox\">\n    <h1><span class=\"badge badge-danger\">404</span></h1>\n    <h1>Error Not Found!!!</h1>\n    <blockquote class=\"blockquote text-center\">\n      <footer class=\"blockquote-footer\">\n        The Page you Requested Is not Found, Please Login\n      </footer>\n    </blockquote>\n    <button class=\"ml-2\" [routerLink]=\"['/login']\">Login</button>\n  </div>\n</div>\n<router-outlet></router-outlet>\n","import { Component, OnInit, Output, Input, EventEmitter } from '@angular/core';\nimport { TasklistService } from '../../task/tasklist.service';\nimport { ToastConfig, Toaster } from 'ngx-toast-notifications';\nimport { MultiUserService } from '../../multiuser/multi-user.service';\n@Component({\n  selector: 'app-create-task',\n  templateUrl: './create-task.component.html',\n  styleUrls: ['./create-task.component.css'],\n})\nexport class CreateTaskComponent implements OnInit {\n  /**common input fields */\n  @Input() userId: any;\n  @Input() operationName: String;\n  @Input() loggedInUser: any;\n  @Input() username: any;\n  @Input() flagOperationForFriend: any;\n  @Input() usersFriend: any;\n  /**task field */\n  @Input() taskListId: any;\n  @Input() taskName: any;\n  /**tasklist field */\n  @Input() taskListName: any;\n  /**subtask field */\n  @Input() subTaskName: any;\n  @Input() taskId: any;\n\n  public createNewtaskResponse: String;\n  public errorResponse: Boolean = true;\n  public successResponse: Boolean = true;\n\n  //component will emit tasklist reload\n  @Output()\n  notifyNewTaskList: EventEmitter<Object> = new EventEmitter<Object>();\n  @Output()\n  notifyNewTask: EventEmitter<Object> = new EventEmitter<Object>();\n  @Output()\n  notifyNewSubTask: EventEmitter<Object> = new EventEmitter<Object>();\n  @Output()\n  closeModal: EventEmitter<String> = new EventEmitter<String>();\n\n  constructor(\n    private taskService: TasklistService,\n    private _toast: Toaster,\n    private multiUserService: MultiUserService\n  ) {}\n\n  ngOnInit(): void {}\n  /**create a single task */\n  public createTask(): any {\n    console.debug('operation::', this.operationName);\n    if (this.operationName.endsWith('New Task')) {\n      console.debug('create new task');\n      let taskInfo = {\n        taskListId: this.taskListId,\n        userId: this.userId,\n        name: this.taskName,\n        status: 'open',\n      };\n      console.debug('taskinfo::', taskInfo);\n      this.taskService.createTask(taskInfo).subscribe(\n        (response) => {\n          console.debug('Create task response::', response.message);\n          console.debug('error::', response);\n          /**New task Create success */\n          if (response.status === 200) {\n            this._toast.open({ text: response.message, type: 'success' });\n            this.errorResponse = false;\n            this.successResponse = true;\n            this.createNewtaskResponse = response.message;\n            console.debug('emitt new task change', response.data);\n            //this.notifyNewTask.emit(response.data);\n            /**notify tasklist component for task updates */\n            let refreshUserId;\n            if (this.flagOperationForFriend) {\n              refreshUserId = this.userId;\n            } else {\n              refreshUserId = this.loggedInUser;\n            }\n            console.debug('refreshing for::', refreshUserId);\n            //this.notifyEditTask.emit(refreshUserId);\n            this.notifyNewTask.emit(refreshUserId);\n            /**emit update notifiation to friends if any*/\n            let notification = `${this.username} created a Task`;\n            this.notifyFriends(notification);\n\n            /**emit close modal event */\n            this.closeModal.emit();\n          }\n          if (response.error === true && response.status === 400) {\n            this._toast.open({ text: `${response.data}`, type: 'danger' });\n          }\n        },\n        (error) => {\n          console.warn('Error::', error.error);\n          /**compute any error while */\n          this.errorResponse = false;\n          this.createNewtaskResponse = error.error.message;\n          console.debug('resposen::', this.createNewtaskResponse);\n\n          this._toast.open({ text: error.error.message, type: 'danger' });\n        }\n      );\n    }\n    if (this.operationName.includes('New SubTask')) {\n      console.debug('create new subtask');\n      let taskInfo = {\n        taskId: this.taskId,\n        name: this.taskName,\n        status: 'open',\n        userId: this.userId,\n      };\n      console.debug('subtaskinfor::', taskInfo);\n      this.taskService.createSubTask(taskInfo).subscribe(\n        (response) => {\n          console.debug('Create task response::', response.message);\n\n          /**New subtask Create success */\n          if (response.status === 200) {\n            this._toast.open({ text: response.message, type: 'success' });\n            this.errorResponse = false;\n            this.successResponse = true;\n            this.createNewtaskResponse = response.message;\n            /**notify tasklist component for task updates */\n            let refreshUserId;\n            if (this.flagOperationForFriend) {\n              refreshUserId = this.userId;\n            } else {\n              refreshUserId = this.loggedInUser;\n            }\n            console.debug('refreshing for::', refreshUserId);\n            this.notifyNewSubTask.emit(refreshUserId);\n            /**emit update notifiation to friends if any*/\n            let notification = `${this.username} created a SubTask`;\n            this.notifyFriends(notification);\n\n            /**emit modal close event */\n            this.closeModal.emit();\n          }\n          if (response.error === true && response.status === 400) {\n            this._toast.open({ text: `${response.data}`, type: 'danger' });\n          }\n        },\n        (error) => {\n          console.warn('Error::', error.error);\n          /**compute any error while */\n          this.errorResponse = false;\n          this.createNewtaskResponse = error.error.message;\n          console.debug('resposen-subtask::', this.createNewtaskResponse);\n          this._toast.open({ text: error.error.message, type: 'danger' });\n        }\n      );\n    }\n    if (this.operationName.includes('New TaskList')) {\n      console.debug('create new tasklist');\n      let taskListInfo = {\n        userId: this.userId,\n        name: this.taskName,\n      };\n      this.taskService.createTaskList(taskListInfo).subscribe(\n        (response) => {\n          console.debug('Create tasklist  response::', response.message);\n\n          /**New subtask Create success */\n          if (response.status === 200) {\n            this._toast.open({ text: response.message, type: 'success' });\n            this.errorResponse = false;\n            this.successResponse = true;\n            this.createNewtaskResponse = response.message;\n            console.debug('emmit new tasklist create', response.data);\n            this.notifyNewTaskList.emit(response.data);\n            /**emit modal close event */\n            this.closeModal.emit();\n            /**emit create notifiation to friends if any*/\n            let notification = `${this.username} created a TaskList`;\n            this.notifyFriends(notification);\n          }\n          if (response.error === true && response.status === 400) {\n            this._toast.open({ text: `${response.data}`, type: 'danger' });\n          }\n        },\n        (error) => {\n          console.warn('Error::', error.error);\n          /**compute any error while */\n          this.errorResponse = false;\n          this.createNewtaskResponse = error.error.message;\n          console.debug('resposen-taklist::', this.createNewtaskResponse);\n          this._toast.open({ text: error.error.message, type: 'danger' });\n        }\n      );\n    }\n  }\n\n  public notifyFriends(notification): any {\n    console.debug('notify friends for updates');\n    /**emit update notifiation to friends if any*/\n    if (this.usersFriend.length !== 0) {\n      console.debug('updates string::', notification, this.usersFriend);\n      this.multiUserService.notifyFriendsForUpdates(\n        notification,\n        this.usersFriend\n      );\n    }\n  }\n}\n","<h3>\n  <span class=\"badge badge-secondary\">{{ operationName }}</span>\n</h3>\n<form #createTaskForm=\"ngForm\" (ngSubmit)=\"createTask()\">\n  <div class=\"form-group\">\n    <label for=\"name\">Name</label>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      name=\"taskName\"\n      required\n      [(ngModel)]=\"taskName\"\n      #_name=\"ngModel\"\n    />\n    <div [hidden]=\"_name.valid || _name.pristine\" class=\"alert alert-danger\">\n      TaskName is Required\n    </div>\n    <div\n      [hidden]=\"errorResponse\"\n      class=\"badge badge-danger\"\n      [ngClass]=\"{\n        'badge badge-danger': errorResponse,\n        'badge badge-success': successResponse\n      }\"\n    >\n      {{ createNewtaskResponse }}\n    </div>\n  </div>\n  <button class=\"mt-2\" [disabled]=\"!createTaskForm.form.valid\">\n    Create Task\n  </button>\n</form>\n","import { Component, OnInit, Output, Input, EventEmitter } from '@angular/core';\nimport { TasklistService } from '../../task/tasklist.service';\nimport { ToastConfig, Toaster } from 'ngx-toast-notifications';\nimport { MultiUserService } from '../../multiuser/multi-user.service';\n@Component({\n  selector: 'app-edit-task',\n  templateUrl: './edit-task.component.html',\n  styleUrls: ['./edit-task.component.css'],\n})\nexport class EditTaskComponent implements OnInit {\n  /**common input fields */\n  @Input() userId: any;\n  @Input() operationName: String;\n  @Input() name: String;\n  @Input() status: String;\n  @Input() loggedInUser: String;\n  @Input() usersFriend: any;\n  @Input() username: any;\n  /**task field */\n  @Input() taskListId: any;\n\n  /**tasklist field */\n  @Input() taskListName: any;\n  @Input() selectTasksList: any[];\n  /**subtask field */\n  @Input() subTaskName: any;\n  @Input() taskId: any;\n  @Input() subTaskId: any;\n  @Input() selectedFriendName: any;\n  @Input() selectTasks: any[];\n  @Input() flagOperationForFriend: any[];\n  public editTaskResponse: String;\n  public errorResponse: Boolean = true;\n  public successResponse: Boolean = true;\n  public tasklist: any;\n  public toggleTaskList: Boolean = false;\n  public toggleTasks: Boolean = false;\n  public toggleStatusSelection: Boolean = false;\n  public selected: String;\n  public selectedTask: String;\n  public selectedTaskList: any = [];\n  public statusOptions: String[];\n\n  //component will emit tasklist reload\n\n  @Output()\n  notifyEditTaskList: EventEmitter<String> = new EventEmitter<String>();\n  @Output()\n  notifyEditTask: EventEmitter<Object> = new EventEmitter<Object>();\n  @Output()\n  notifyEditSubTask: EventEmitter<Object> = new EventEmitter<Object>();\n  @Output()\n  closeModal: EventEmitter<String> = new EventEmitter<String>();\n\n  constructor(\n    private taskService: TasklistService,\n    private _toast: Toaster,\n    private multiUserService: MultiUserService\n  ) {}\n\n  ngOnInit(): void {\n    this.statusOptions = ['open', 'done'];\n    //this.selected = this.selectTasks[0];\n    /**toggle selection item based on task ops */\n    if (this.operationName === 'Edit TaskList') {\n      console.debug('ops edit tasklist::', this.selectTasks);\n      this.toggleTaskList = true;\n      this.toggleTasks = true;\n      this.toggleStatusSelection = true;\n    }\n    if (this.operationName === 'Edit Task') {\n      console.debug('ops edit task::', this.selectTasksList);\n      console.debug('ops edit task');\n      /*this.selectTasksList.map((list) => {\n        if (list.taskListId === this.taskListId) {\n          console.debug('taskname::', list.name);\n          this.selectedTask = list.name;\n        }\n      });*/\n      this.toggleTaskList = false;\n      this.toggleTasks = true;\n      //console.debug('selected value::', this.selectedTask);\n    }\n    if (this.operationName === 'Edit SubTask') {\n      console.debug('ops edit subtask::', this.selectTasks);\n      console.debug('ops edit subtasks');\n      this.toggleTaskList = true;\n      this.toggleTasks = false;\n      this.getAllTask();\n    }\n  }\n  /**fetch all tasks for selection use while updating subtasks */\n  public getAllTask(): any {\n    let taskInfo = {\n      taskListId: this.taskListId,\n      userId: this.userId,\n    };\n    console.debug('input:', taskInfo);\n    this.taskService.getTasks(taskInfo).subscribe(\n      (response) => {\n        console.debug('get all task res::', response.message);\n        /**updated tasks */\n        this.selectTasks = response.data;\n        console.debug('All tasks::', this.selectTasks);\n        this.selectTasks.map((list) => {\n          if (list.taskId === this.taskId) {\n            console.debug('taskfor subtask::', list.taskId);\n            this.selected = list.taskId;\n          }\n        });\n        console.debug('selected task::', this.selected);\n      },\n      (error) => {\n        console.warn('Error::', error.error);\n      }\n    );\n  }\n  public editTask(): any {\n    console.debug('editing task');\n    /**create a single task */\n    console.debug('operation::', this.operationName);\n    if (this.operationName.endsWith('Edit Task')) {\n      console.debug('edit task');\n      let taskInfo = {\n        taskListId: this.taskListId,\n        taskId: this.taskId,\n        userId: this.userId,\n        operation: 'edit',\n        update: {\n          name: this.name,\n          status: this.status,\n          taskListId: this.selectedTask,\n        },\n      };\n      console.debug('update taskinfo::', taskInfo);\n      this.taskService.updateTask(taskInfo).subscribe(\n        (response) => {\n          console.debug('update task response::', response.message);\n\n          /**New task Create success */\n          if (response.status === 200) {\n            this._toast.open({ text: response.message, type: 'success' });\n            this.errorResponse = false;\n            this.successResponse = true;\n            this.editTaskResponse = response.message;\n            console.debug('emitt new task change', response.data);\n            /**notify tasklist component for task updates */\n            let refreshUserId;\n            if (this.flagOperationForFriend) {\n              refreshUserId = this.userId;\n            } else {\n              refreshUserId = this.loggedInUser;\n            }\n            console.debug('refreshing for::', refreshUserId);\n            this.notifyEditTask.emit(refreshUserId);\n            /**emit update notifiation to friends if any*/\n            let notification = `${this.username} updated a Task`;\n            this.notifyFriends(notification);\n            /**emit close modal event */\n            this.closeModal.emit();\n          }\n        },\n        (error) => {\n          console.warn('Error::', error.error);\n          /**compute any error while */\n          this.errorResponse = false;\n          this.editTaskResponse = error.error.message;\n          console.debug('resposen::', this.editTaskResponse);\n\n          this._toast.open({ text: error.error.message, type: 'danger' });\n        }\n      );\n    }\n    if (this.operationName.includes('Edit SubTask')) {\n      console.debug('edit new subtask');\n      let taskInfo = {\n        taskId: this.taskId,\n        subTaskId: this.subTaskId,\n        operation: 'edit',\n        userId: this.userId,\n        update: {\n          name: this.name,\n          status: this.status,\n          taskId: this.selected,\n        },\n      };\n      console.debug('subtaskinfor::', taskInfo);\n      this.taskService.updateSubTask(taskInfo).subscribe(\n        (response) => {\n          console.debug('update task response::', response.message);\n          /**subtask update success */\n          if (response.status === 200) {\n            this._toast.open({ text: response.message, type: 'success' });\n            this.errorResponse = false;\n            this.successResponse = true;\n            this.editTaskResponse = response.message;\n            let refreshUserId;\n            if (this.flagOperationForFriend) {\n              refreshUserId = this.userId;\n            } else {\n              refreshUserId = this.loggedInUser;\n            }\n            this.notifyEditSubTask.emit(refreshUserId);\n            /**emit update notifiation to friends if any*/\n            let notification = `${this.username} updated a SubTask`;\n            this.notifyFriends(notification);\n            /**emit close modal event */\n            this.closeModal.emit();\n          }\n        },\n        (error) => {\n          console.warn('Error::', error.error);\n          /**compute any error while */\n          this.errorResponse = false;\n          this.editTaskResponse = error.error.message;\n          console.debug('resposen-subtask::', this.editTaskResponse);\n          this._toast.open({ text: error.error.message, type: 'danger' });\n        }\n      );\n    }\n    if (this.operationName.includes('Edit TaskList')) {\n      console.debug('update tasklist');\n      let taskListInfo = {\n        userId: this.userId,\n        taskListId: this.taskListId,\n        operation: 'edit',\n        update: {\n          name: this.name,\n        },\n      };\n      this.taskService.updateTaskList(taskListInfo).subscribe(\n        (response) => {\n          console.debug('update tasklist  response::', response.message);\n\n          /**New subtask update success */\n          if (response.status === 200) {\n            this._toast.open({ text: response.message, type: 'success' });\n            this.errorResponse = false;\n            this.successResponse = true;\n            this.editTaskResponse = response.message;\n            console.debug('emmit  tasklist edit');\n            this.notifyEditTaskList.emit(\n              `${this.name + ':' + this.taskListId}`\n            );\n            /**emit update notifiation to friends if any*/\n            let notification = `${this.username} updated a TaskList`;\n            this.notifyFriends(notification);\n\n            /**emit close modal event */\n            this.closeModal.emit();\n          }\n        },\n        (error) => {\n          console.warn('Error::', error.error);\n          /**compute any error while update*/\n          this.errorResponse = false;\n          this.editTaskResponse = error.error.message;\n          console.debug('resposen-taklist::', this.editTaskResponse);\n          this._toast.open({ text: error.error.message, type: 'danger' });\n        }\n      );\n    }\n  }\n  public notifyFriends(notification): any {\n    console.debug('notify friends for updates');\n    /**emit update notifiation to friends if any*/\n    if (this.usersFriend.length !== 0) {\n      console.debug('updates string::', notification, this.usersFriend);\n      this.multiUserService.notifyFriendsForUpdates(\n        notification,\n        this.usersFriend\n      );\n    }\n  }\n}\n","<h3>\n  <span class=\"badge badge-secondary\">{{ operationName }}</span>\n</h3>\n<form #editTaskForm=\"ngForm\" (ngSubmit)=\"editTask()\">\n  <div class=\"form-group\">\n    <label for=\"name\">Name</label>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      name=\"name\"\n      required\n      [(ngModel)]=\"name\"\n      #_name=\"ngModel\"\n    />\n    <div [hidden]=\"_name.valid || _name.pristine\" class=\"alert alert-danger\">\n      TaskName is Required\n    </div>\n    <div [hidden]=\"toggleTaskList\">\n      <select\n        class=\"form-control mt-1\"\n        #list\n        required\n        [(ngModel)]=\"selectedTask\"\n        name=\"selectedTask\"\n        #_tsk=\"ngModel\"\n      >\n        <option\n          *ngFor=\"let task of selectTasksList\"\n          [value]=\"task.taskListId\"\n          >{{ task.name }}</option\n        >\n      </select>\n    </div>\n    <div [hidden]=\"toggleTasks\">\n      <select\n        class=\"form-control mt-1\"\n        #list\n        required\n        [(ngModel)]=\"selected\"\n        name=\"selected\"\n        #_tsk=\"ngModel\"\n      >\n        <option *ngFor=\"let task of selectTasks\" [value]=\"task.taskId\">{{\n          task.name\n        }}</option>\n      </select>\n    </div>\n    <div class=\"status\" [hidden]=\"toggleStatusSelection\">\n      <select\n        class=\"form-control mt-1\"\n        #list\n        required\n        [(ngModel)]=\"status\"\n        name=\"status\"\n        #_tsk=\"ngModel\"\n      >\n        <option *ngFor=\"let status of statusOptions\" [value]=\"status\">{{\n          status\n        }}</option>\n      </select>\n    </div>\n    <div\n      [hidden]=\"errorResponse\"\n      class=\"badge badge-danger\"\n      [ngClass]=\"{\n        'badge badge-danger': errorResponse,\n        'badge badge-success': successResponse\n      }\"\n    >\n      {{ editTaskResponse }}\n    </div>\n  </div>\n  <button class=\"mt-2\">\n    Edit Task\n  </button>\n</form>\n","import { NgModule } from '@angular/core';\nimport { CommonModule, FormatWidth } from '@angular/common';\n\nimport { FormsModule } from '@angular/forms';\nimport { TasklistComponent } from '../task/tasklist/tasklist.component';\nimport { TaskModule } from '../task/task.module';\nimport { CreateTaskComponent } from './create-task/create-task.component';\nimport { EditTaskComponent } from './edit-task/edit-task.component';\nimport { MultiuserModule } from '../multiuser/multiuser.module';\n@NgModule({\n  declarations: [CreateTaskComponent, EditTaskComponent],\n  imports: [CommonModule, FormsModule, MultiuserModule],\n  exports: [CreateTaskComponent, EditTaskComponent],\n  providers: [TasklistComponent],\n})\nexport class SharedModule {}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router } from '@angular/router/';\nimport { Cookie } from 'ng2-cookies';\n@Injectable({\n  providedIn: 'root',\n})\nexport class RouterGuardService {\n  constructor(private router: Router) {}\n  canActivate(router: ActivatedRouteSnapshot): boolean {\n    console.log('Guard Route');\n    let authToken = Cookie.get('authToken');\n    if (authToken == null || authToken == undefined || authToken == '') {\n      this.router.navigate(['/login']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { TasklistService } from '../tasklist.service';\nimport {} from '../../multiuser/multiuser.module';\n@Component({\n  selector: 'app-subtasks',\n  templateUrl: './subtasks.component.html',\n  styleUrls: ['./subtasks.component.css'],\n})\nexport class SubtasksComponent implements OnInit {\n  //init field\n  @Input() taskId: any;\n  @Input() userId: any;\n  public subtasks: [Object];\n  constructor(private taskService: TasklistService) {}\n  @Output()\n  delete: EventEmitter<String> = new EventEmitter<String>();\n  @Output()\n  edit: EventEmitter<String> = new EventEmitter<String>();\n  ngOnInit(): void {\n    this.getAllSubTasks();\n  }\n  public getAllSubTasks(): any {\n    let taskInfo = {\n      taskId: this.taskId,\n    };\n    this.taskService.getSubTasks(taskInfo).subscribe(\n      (response) => {\n        /**get subtasks */\n        //console.debug('Subtasks Response::', response.message);\n        if (response.status === 200) this.subtasks = response.data;\n      },\n      (error) => {\n        console.warn('Error fetching Subtasks:', error.error);\n      }\n    );\n  }\n  public addNewSubTask(newSubTask): any {\n    //console.debug('New sub task in subtask component::', newSubTask);\n    this.subtasks.push(newSubTask);\n  }\n  /**emit subtask deletion */\n  public emitSubTaskDeletion(taskId, subTaskId): any {\n    //console.debug('Emit sub task deletetion', taskId, subTaskId);\n    this.delete.emit(`${taskId}:${subTaskId}`);\n  }\n  /**emit subtask edit */\n  public emitEditSubTask(taskId, name, subTaskId, status): any {\n    //console.debug('Emit edit sub task::', taskId, name, subTaskId);\n    this.edit.emit(`${taskId}:${name}:${subTaskId}:${status}`);\n  }\n}\n","<ul class=\"list-group\">\n  <li class=\"list-group-item\" *ngFor=\"let task of subtasks\">\n    <span class=\"name\">{{ task.name }}</span>\n    <span class=\"taskHeader\">\n      <img\n        class=\"add mr-2\"\n        src=\"/assets/removetaskicon.png\"\n        (click)=\"emitSubTaskDeletion(task.taskId, task.subTaskId)\"\n      />\n      <img\n        class=\"add\"\n        src=\"/assets/edit.png\"\n        (click)=\"\n          emitEditSubTask(task.taskId, task.name, task.subTaskId, task.status)\n        \"\n      />\n    </span>\n  </li>\n</ul>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TasklistComponent } from './tasklist/tasklist.component';\nimport { TasklistService } from './tasklist.service';\nimport { SharedModule } from '../shared/shared.module';\nimport { TasksComponent } from './tasks/tasks.component';\nimport { SubtasksComponent } from './subtasks/subtasks.component';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { MultiuserModule } from '../multiuser/multiuser.module';\nimport { RouterGuardService } from './router-guard.service';\n@NgModule({\n  declarations: [TasklistComponent, TasksComponent, SubtasksComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    SharedModule,\n    NgbModule,\n    MultiuserModule,\n    RouterModule.forRoot([\n      {\n        path: 'taskList',\n        component: TasklistComponent,\n        pathMatch: 'full',\n        canActivate: [RouterGuardService],\n      },\n    ]),\n  ],\n  providers: [TasklistService, RouterGuardService],\n  exports: [TasksComponent, SubtasksComponent, TasklistComponent],\n})\nexport class TaskModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpErrorResponse,\n  HttpHeaders,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { UserService } from '../user/user.service';\nimport * as io from 'socket.io-client';\n@Injectable({\n  providedIn: 'root',\n})\nexport class TasklistService {\n  //initialize\n  public baseurl = 'http://localhost:4201/api/v1';\n  private socket;\n  private socketUrl = 'http://localhost:4201/multiusers';\n  constructor(private _http: HttpClient, private userService: UserService) {\n    /**init client socket */\n    this.socket = io(this.socketUrl, {\n      'auto connect': true,\n      multiplex: false,\n      'try multiple transports': true,\n    });\n  }\n  /**define listeners and emitters */\n  /**1: Listen to authentication handshake */\n  public autheticateUser = () => {\n    console.debug('Auth user listener');\n    return Observable.create((observer) => {\n      this.socket.on('authenticate', (data) => {\n        observer.next(data);\n      });\n    });\n  };\n  /**2 send/emit authToken for authentication */\n  public setUser = (authToken) => {\n    console.debug('Emmit user authentication');\n    this.socket.emit('set-user', authToken);\n  };\n  /**3 Get Online Userlist by listning to online-users broadcase */\n  public getOnlineUserList = () => {\n    //console.debug('get online user service');\n    return Observable.create((observer) => {\n      this.socket.on('online-users', (data) => {\n        observer.next(data);\n      });\n    });\n  };\n  //handle exceptions\n  public handleError(error: HttpErrorResponse) {\n    console.debug('Http Error:', error.message);\n    return Observable.throw(error.message);\n  }\n  public httpHeaderOptions = {\n    headers: new HttpHeaders({\n      authToken: this.userService.getAutheticatedUserInfo().authToken,\n    }),\n  };\n\n  //create taskList\n  public createTaskList(taskListData): any {\n    console.debug('https header:', this.httpHeaderOptions);\n    let createTaskListRes = this._http.post(\n      `${this.baseurl}/createTaskList`,\n      taskListData,\n      this.httpHeaderOptions\n    );\n    return createTaskListRes;\n  }\n  //get taskLists for a userId\n  public getTaskLists(userId, skip): any {\n    let allTaskLists = this._http.post(\n      `${this.baseurl}/getAllTaskList/?skip=${skip}`,\n      userId,\n      this.httpHeaderOptions\n    );\n    return allTaskLists;\n  }\n  //created task\n  public createTask(taskDetails): any {\n    //console.debug('create task service:', taskDetails);\n    let createTaskRes = this._http.post(\n      `${this.baseurl}/createTask`,\n      taskDetails,\n      this.httpHeaderOptions\n    );\n    return createTaskRes;\n  }\n  //get tasks for a tasklist and userid\n  public getTasks(taskData): any {\n    let allTasks = this._http.post(\n      `${this.baseurl}/getTasks`,\n      taskData,\n      this.httpHeaderOptions\n    );\n    return allTasks;\n  }\n  //create subtask for a taskid\n  public createSubTask(subTaskDetails): any {\n    let createSubTaskRes = this._http.post(\n      `${this.baseurl}/createSubTask`,\n      subTaskDetails,\n      this.httpHeaderOptions\n    );\n    return createSubTaskRes;\n  }\n  //get subtask for a taskid\n  public getSubTasks(subTaskDetails): any {\n    let allSubTasks = this._http.post(\n      `${this.baseurl}/getSubTasks`,\n      subTaskDetails,\n      this.httpHeaderOptions\n    );\n    return allSubTasks;\n  }\n  /**update task */\n  public updateTask(taskInfo): any {\n    //console.debug('update task sevice::', taskInfo);\n    let udpatedTask = this._http.post(\n      `${this.baseurl}/updateTask`,\n      taskInfo,\n      this.httpHeaderOptions\n    );\n    return udpatedTask;\n  }\n  /**update/delete tasklist */\n  public updateTaskList(taskListInfo): any {\n    console.debug('update tasklist service:');\n    return this._http.post(\n      `${this.baseurl}/updatetaskList`,\n      taskListInfo,\n      this.httpHeaderOptions\n    );\n  }\n  /**update/delete subtask */\n  public updateSubTask(subTaskInfo): any {\n    console.debug('update subtask  servcie');\n    return this._http.post(\n      `${this.baseurl}/updateSubTask`,\n      subTaskInfo,\n      this.httpHeaderOptions\n    );\n  }\n  /**revert changes */\n  public revertLatestChange(userId): any {\n    console.debug('reverting changes::for', userId);\n    return this._http.post(\n      `${this.baseurl}/revertChanges`,\n      userId,\n      this.httpHeaderOptions\n    );\n  }\n}\n","import {\n  Component,\n  OnInit,\n  EventEmitter,\n  Output,\n  ViewContainerRef,\n  ViewChild,\n  ElementRef,\n} from '@angular/core';\nimport { TasklistService } from '../tasklist.service';\nimport { ToastConfig, Toaster } from 'ngx-toast-notifications';\nimport { Router, Route } from '@angular/router';\nimport { UserService } from '../../user/user.service';\nimport { NgbModal, ModalDismissReasons } from '@ng-bootstrap/ng-bootstrap';\nimport { MultiUserService } from '../../multiuser/multi-user.service';\nimport { HostListener } from '@angular/core';\n@Component({\n  selector: 'app-tasklist',\n  templateUrl: './tasklist.component.html',\n  styleUrls: ['./tasklist.component.css'],\n})\nexport class TasklistComponent implements OnInit {\n  //scroll postion\n  @ViewChild('scrollBar', { read: ElementRef })\n  public scrollMe: ElementRef;\n  //init fields\n  public taskLists: any = [];\n  public subtasks: any = [];\n  public fetchedAlltaskLists: String;\n  public userId: String;\n  public usersFriendList: any = [];\n  public page: any;\n  public toggleLoadMoreTasks: Boolean = false;\n  /**new task info */\n  public subTaskName: String;\n  public taskListId: String;\n  public taskStatus: String;\n  public taskId: String;\n  public operationName: String;\n  public closeResult: string;\n\n  /**edit */\n  public name: String;\n  public selectTasks: any = [];\n  public selectTasksList: any = [];\n  public subTaskId: String;\n  public tasks: any = [];\n  public status: String;\n  /**multiusers */\n  public toggleOnlineUser: Boolean = true;\n  public toggleFriendList: Boolean = true;\n  public onlineUser: any;\n  public friendList: any;\n  public username: String;\n  public onlineUsersList: any[];\n  public authToken = String;\n  public selectedFriendName = String;\n  public toggleBannerDisplay: Boolean = true;\n  public flagDisplayingFriendsItem: Boolean = false;\n  /**-----------Modifications------- */\n  public selectedUserId: String;\n  public selectedTaskListId: String;\n  public selectedTaskId: String;\n  public selectedTaskName: String;\n  public selectedTaskStatus: String;\n  public selectedSubTaskId: String;\n  /**component will emit event ot update\n   * task and subtask array in their respective compoenents\n   */\n\n  @Output()\n  notifyNewTaskList: EventEmitter<Object> = new EventEmitter<Object>();\n  @Output()\n  notifyNewTask: EventEmitter<Object> = new EventEmitter<Object>();\n  @Output()\n  notifyNewSubTask: EventEmitter<Object> = new EventEmitter<Object>();\n  constructor(\n    private taskListService: TasklistService,\n    private _toast: Toaster,\n    private _router: Router,\n    private userService: UserService,\n    private modalService: NgbModal,\n    private multiUserService: MultiUserService\n  ) {\n    const {\n      authToken,\n      firstName,\n      lastName,\n      friends,\n    } = userService.getAutheticatedUserInfo();\n    this.userId = userService.getAutheticatedUserInfo().userId;\n    this.username = firstName + ' ' + lastName;\n    this.authToken = authToken;\n    this.selectedUserId = this.userId;\n    this.usersFriendList = friends;\n    this.page = 0;\n  }\n  /**document listener for undo process */\n  @HostListener('document:keydown', ['$event'])\n  onKeyDown(ev: KeyboardEvent) {\n    if (ev.metaKey || (ev.ctrlKey && ev.key === 'z')) {\n      console.debug('undo start');\n      this.startUndoProcess();\n    }\n  }\n  ngOnInit(): void {\n    console.debug('NGONIT RELOAD_______________TASKLIST');\n    this.handeShakeAuthentication();\n    //load task list on component load\n    this.getAllTaskList(this.userId);\n  }\n  public userLogout(): any {\n    console.debug('user logout');\n    this.multiUserService.disconnectUser(this.userId);\n    /**redirect to login page */\n    setTimeout(() => this._router.navigate(['/login']), 130);\n  }\n  public handeShakeAuthentication(): any {\n    console.debug('listen to hand shake from task-list');\n    this.taskListService.autheticateUser().subscribe((data) => {\n      this.taskListService.setUser(this.authToken);\n    });\n  }\n  /**set inline users list */\n  public setOnlineUsers(users): any {\n    //console.debug('online users::');\n    this.onlineUser = users;\n  }\n  /**toggle friend list */\n  public showFriendList(): any {\n    //console.debug('Show friend list');\n    this.toggleFriendList = !this.toggleFriendList;\n    this.toggleOnlineUser = true;\n  }\n  /**set friend list */\n  public setFriendList(friends): any {\n    //console.debug('Set friend list::', friends);\n    this.friendList = friends;\n  }\n  /**toggle online userlist */\n  public showOnlineUsers(): any {\n    this.toggleOnlineUser = !this.toggleOnlineUser;\n    this.toggleFriendList = true;\n  }\n  /**open modal */\n  open(content, ops, id) {\n    //console.debug('modal open::', ops, id);\n    this.operationName = ops;\n    //console.debug(ops == 'New Task');\n    if (ops == 'New Task') {\n      //console.debug('new task case');\n      this.taskListId = id;\n      this.selectedTaskListId = id;\n    }\n    if (ops == 'New SubTask') {\n      //console.debug('new subtask case');\n      this.taskId = id;\n      this.selectedTaskId = id;\n    }\n\n    //console.debug('tasklistid::', this.taskListId);\n    //console.debug('taskid::', this.taskId);\n    this.modalService\n      .open(content, { ariaLabelledBy: 'modal-create' })\n      .result.then(\n        (result) => {\n          this.closeResult = `Closed with: ${result}`;\n        },\n        (reason) => {\n          this.closeResult = `Dismissed`;\n        }\n      );\n    //console.debug('Modal closed::', this.closeResult);\n  }\n  /**open edit modal */\n  openEdit(content, ops, id, name) {\n    console.debug('modal edit open::', ops, id);\n    this.operationName = ops;\n    console.debug(ops == 'Edit Task');\n    if (ops == 'Edit TaskList') {\n      console.debug('Edit TaskList case');\n      this.taskListId = id;\n      this.selectedTaskListId = id;\n      this.name = name;\n      this.selectedTaskName = name;\n\n      console.debug(\n        'selecteduser,selectedtasklistid,name::',\n        this.selectedUserId,\n        this.selectedTaskListId,\n        this.selectedTaskName\n      );\n    }\n    if (ops == 'Edit Task') {\n      console.debug('Edit task option', id);\n      /**split the incoming values from task-compnent\n       * and send it over to edit-component to complete\n       * the edit operation\n       */\n      const [taskId, name, taskListId, status] = id.split(':');\n      this.taskId = taskId;\n      this.selectedTaskId = taskId;\n      this.selectedTaskName = name;\n      this.selectedTaskListId = taskListId;\n      this.selectedTaskStatus = status;\n      this.selectTasksList = this.taskLists;\n    }\n    if (ops == 'Edit SubTask') {\n      console.debug('edit subtask case');\n      /**split the incoming values from task-compnent\n       * and send it over to edit-component to complete\n       * the edit operation\n       */\n\n      const [taskId, name, subTaskId, status, taskListId] = id.split(':');\n      //console.debug('list if from tasks::', taskListId);\n      this.taskId = taskId;\n      this.selectedTaskId = taskId;\n      this.name = name;\n      this.selectedTaskName = name;\n      this.subTaskId = subTaskId;\n      this.selectedSubTaskId = subTaskId;\n      this.taskListId = taskListId;\n      this.selectedTaskListId = taskListId;\n      this.status = status;\n      this.selectedTaskStatus = status;\n      this.selectTasks = [];\n    }\n\n    //console.debug('tasklistid::', this.taskListId);\n    //console.debug('taskid::', this.taskId);\n    this.modalService\n      .open(content, { ariaLabelledBy: 'modal-edit' })\n      .result.then(\n        (result) => {\n          this.closeResult = `Closed with: ${result}`;\n        },\n        (reason) => {\n          this.closeResult = `Dismissed`;\n        }\n      );\n    //console.debug('Modal closed::', this.closeResult);\n  }\n\n  /**get all taskLists */\n  public getAllTaskList(userId): any {\n    let userdata = {\n      userId: userId,\n    };\n    this.page = 5;\n    this.taskListService.getTaskLists(userdata, this.page).subscribe(\n      (response) => {\n        console.debug('get all task list', response.message);\n        this.fetchedAlltaskLists = response.message;\n        /**store all tasklists */\n        //console.debug('tasklists return::', response.data);\n        //this.taskLists.push(...response.data);\n        this.taskLists = response.data;\n      },\n      (error) => {\n        console.warn('Error fetching task list', error, error);\n        this.fetchedAlltaskLists = error.error.message;\n        this._toast.open({ text: error.error.message, type: 'danger' });\n      }\n    );\n  }\n\n  /**listen for newly created task list and push it to existing array */\n  public addNewTaskList(newTaskList: any): any {\n    console.debug('refresh new taskList::', newTaskList.name);\n    //console.debug('Adding to current list');\n    /**notification for delete items for friends */\n    console.debug('notify friends for updates');\n    /**emit update notifiation to friends if any*/\n    let notification = `${this.username} Created a Task`;\n    this.notifyFriends(notification);\n    return this.taskLists.push(newTaskList);\n  }\n  /**listen for newly created task  and emitt event to update it */\n  public addNewTask(userId: any): any {\n    //console.debug('addnew task listeners::', newTask);\n    //console.debug(typeof newTask);\n    this.getAllTaskList(userId);\n    //this.notifyNewTask.emit(newTask);\n  }\n  /**listen for newly created task list and emit event to update it */\n  public addNewSubTask(userId: any): any {\n    //console.debug(typeof newSubTask);\n    //console.debug(newSubTask);\n    this.getAllTaskList(userId);\n    //this.notifyNewSubTask.emit(newSubTask);\n  }\n\n  /**toggle create subtask popup */\n  public openCreateSubTaskForm(taskId, modal): any {\n    //console.debug('Emit from task component::', taskId);\n    this.taskId = taskId;\n    this.open(modal, 'New SubTask', taskId);\n  }\n\n  /**delete task listeners from task component*/\n  public deleteTask(values): any {\n    //console.debug('Delete task listeners::', values, this.userId);\n    /**call delete service */\n    let [taskId, taskListId, userId] = values.split(':');\n    //console.debug(taskListId, taskId);\n    let taskInfo = {\n      taskListId: taskListId,\n      taskId: taskId,\n      userId: userId,\n      operation: 'delete',\n    };\n    console.debug('delete taskinfo::', taskInfo);\n    this.taskListService.updateTask(taskInfo).subscribe(\n      (response) => {\n        //console.debug('Delete api reponse::', response.message);\n        /**success toast  */\n        this._toast.open({ text: response.message, type: 'success' });\n        /**notify tasklist component for task updates */\n        let refreshUserId;\n        if (this.flagDisplayingFriendsItem) {\n          refreshUserId = this.selectedUserId;\n        } else {\n          refreshUserId = this.userId;\n        }\n        console.debug('refreshing for::', refreshUserId);\n        this.getAllTaskList(refreshUserId);\n      },\n      (error) => {\n        console.debug('Error Deleting Task::', error.error);\n        this._toast.open({ text: error.error.message, type: 'danger' });\n      }\n    );\n    /**notification for delete items for friends */\n    console.debug('notify friends for updates');\n    /**emit update notifiation to friends if any*/\n    let notification = `${this.username} deleted a Task`;\n    this.notifyFriends(notification);\n  }\n  /**edit task listeners from task-component */\n  public editTask(values, modal): any {\n    console.debug('Edit task modal open::', values, modal);\n    this.openEdit(modal, 'Edit Task', values, name);\n  }\n  /**edit subtask listeners from sub-task-> task-component */\n  public editSubTask(values, modal): any {\n    this.openEdit(modal, 'Edit SubTask', values, name);\n  }\n  /**delete tasklist */\n  public deleteTaskList(taskListId: String): any {\n    //console.debug('delete tasklist::', taskListId);\n    /**compute input params based on loggedIn user or friend's selection */\n    let userId = this.flagDisplayingFriendsItem\n      ? this.selectedUserId\n      : this.userId;\n    console.debug('deleting task list for ::', userId);\n    let taskListInfo = {\n      userId: userId,\n      taskListId: taskListId,\n      operation: 'delete',\n    };\n    this.taskListService.updateTaskList(taskListInfo).subscribe(\n      (response) => {\n        //console.debug('Delete task list response::', response.message);\n        this._toast.open({ text: response.message, type: 'success' });\n        /**delete the entry from current tasklist */\n        this.taskLists = this.taskLists.filter(\n          (list) => list.taskListId != taskListId\n        );\n        /**notification for delete items for friends */\n        console.debug('notify friends for updates');\n        /**emit update notifiation to friends if any*/\n        let notification = `${this.username} deleted a TaskList`;\n        this.notifyFriends(notification);\n      },\n      (error) => {\n        console.debug('Error deleting tasklist::', error.error);\n        this._toast.open({ text: error.error.message, type: 'danger' });\n      }\n    );\n  }\n  /**edit task list */\n  public editTaskLists(value): any {\n    //console.debug('edit tasklist listener::', value);\n    const [name, taskListId] = value.split(':');\n    //console.debug('to edit::', name, taskListId);\n    /**update tasklist name */\n    this.taskLists.filter((list) => {\n      if (list.taskListId === taskListId) {\n        list.name = name;\n        return list;\n      }\n    });\n  }\n  public postEditTask(value): any {\n    this.getAllTaskList(value);\n  }\n  public postEditSubTask(value): any {\n    this.getAllTaskList(value);\n  }\n  public getFriendsItems(selectedFriend): any {\n    console.debug('listen to friend selection::', selectedFriend);\n    let [friendName, friendUserId] = selectedFriend.split(':');\n    /**hide the friendlist div */\n    this.toggleFriendList = true;\n    /**switch flag to friend's view */\n    this.flagDisplayingFriendsItem = true;\n    /**fetch taskLists for friend and add to existing taskList array */\n    this.selectedUserId = friendUserId;\n    this.selectedFriendName = friendName;\n    /**display banner */\n    this.toggleBannerDisplay = false;\n    console.debug('get all task tasklist for friends::');\n    this.getAllTaskList(friendUserId);\n    /**filter the current task list based on current USERID i.e\n     * loggedIn user or selected friend\n     */\n    this.taskLists = this.taskLists.filter((list) => {\n      list.userId !== this.userId;\n    });\n    console.debug('tasklist::', this.taskLists);\n    /**toast for friend's selection */\n    this._toast.open({\n      text: `opening tasks for ${friendName}`,\n      type: 'info',\n    });\n  }\n  /**reload friendly updates */\n  public reloadFriendlyUpdates(value): any {\n    console.debug('reload listener::', value);\n    this.getAllTaskList(value);\n  }\n  /**refresh page for showLoggedInUsersTask i.e.\n   * switch from friend's view to seld\n   *\n   */\n  public showLoggedInUsersTask(userId): any {\n    console.debug('reload for self');\n    this.getAllTaskList(userId);\n    /**hide friend's banner */\n    this.toggleBannerDisplay = true;\n  }\n  /**utitlity method for realtime update notification  */\n  public notifyFriends(notification): any {\n    console.debug('notify friends for updates');\n    /**emit update notifiation to friends if any*/\n    if (this.usersFriendList.length !== 0) {\n      console.debug('updates string::', notification, this.usersFriendList);\n      this.multiUserService.notifyFriendsForUpdates(\n        notification,\n        this.usersFriendList\n      );\n    }\n  }\n  /**notification for sub task deeltion */\n  public notifyFriendsSTaskDelete(value): any {\n    console.debug('notification for sub task deletion');\n    let notification = `${this.username} deleted a SubTask`;\n    this.notifyFriends(notification);\n  }\n  /**listener for friendly task updates */\n  public friendlyUpdatesListener(): any {\n    let toastString;\n    let friendList = [];\n    console.debug('Friendly task updates');\n    this.multiUserService.friendlyTaskUpdates().subscribe((updates) => {\n      console.debug('updates listener::', updates);\n      if (typeof updates === 'string') {\n        toastString = updates;\n        console.debug('toast string::', toastString);\n      } else {\n        friendList = updates;\n        console.debug('friendlist::', updates);\n      }\n      console.debug('is friend::', friendList, this.userId);\n      if (friendList.length !== 0) {\n        friendList.map((fr) => {\n          if (fr !== null && fr === this.userId) {\n            console.debug('Found friend');\n            this._toast.open({ text: toastString, type: 'dark' });\n            //emit reload tasklist event\n            console.debug(\"reloading task for  ,since it's a friend\");\n            this.getAllTaskList(this.userId);\n          }\n        });\n      }\n    });\n  }\n  public startUndoProcess(): any {\n    console.debug(\n      'Start undo process::by the current user forthe current user'\n    );\n    console.debug('loggedIn USER:', this.userId);\n    console.debug('selected/friendID::', this.selectedUserId);\n    /**read the latest  updates done for the selctedUser\n     * which will be either current user or if he is viewing task for\n     * a friend\n     * -->call fetchhistoric data api\n     * -->on success response reload the tasklist for the selected user\n     */\n    let userInfo = {\n      userId: this.selectedUserId,\n    };\n    this.taskListService.revertLatestChange(userInfo).subscribe(\n      (response) => {\n        console.debug('revert changes api response:', response);\n        if (response.status === 200) {\n          console.debug('Revert-Success::', response.message);\n          console.debug('Reloading the current tasklist');\n          /**timeout to fetch the updated db data */\n          setTimeout(() => {\n            this.getAllTaskList(this.selectedUserId);\n            this._toast.open({ text: response.message, type: 'success' });\n          }, 1000);\n          /**notify friends about changes */\n          let notification = `${this.username} Reverted a Change`;\n          this.notifyFriends(notification);\n        } else {\n          this._toast.open({ text: response.message, type: 'danger' });\n        }\n      },\n      (error) => {\n        console.debug('Revert Change API Error::', error.error);\n        this._toast.open({ text: error.error.message, type: 'danger' });\n      }\n    );\n  }\n  /**load more tasks */\n  public loadMoreTaskList(): any {\n    console.debug('load more tasks');\n    if (this.page === 0 || this.page < 0) {\n      this.page = 3;\n    } else {\n      this.page = --this.page;\n    }\n\n    let currentTaskList = this.taskLists;\n    console.debug('current task::', currentTaskList);\n    console.debug('task lists length::', this.taskLists.length);\n\n    let user = {\n      userId: this.selectedUserId,\n    };\n    this.taskListService.getTaskLists(user, this.page).subscribe(\n      (response) => {\n        console.debug('resposne laod more tasks::', response.data);\n        let result = response.data;\n        this.taskLists = response.data;\n        console.debug('final tasks::', this.taskLists);\n      },\n      (error) => {\n        console.debug('error load::', error.error);\n      }\n    );\n  }\n}\n","<div class=\"container\">\n  <div>\n    <span (click)=\"open(createModal, 'New TaskList', '')\">\n      <img class=\"addList\" src=\"/assets/addListIcon.png\" />\n      <code>Add Task List</code>\n    </span>\n    <div class=\"logout\">\n      <button class=\"btn btn-outline-dark\" (click)=\"userLogout()\">\n        Logout\n      </button>\n    </div>\n  </div>\n  <div class=\"userinfo\">\n    <figure class=\"figure\">\n      <img\n        src=\"/assets/loginUser.png\"\n        class=\"figure-img img-fluid rounded\"\n        alt=\"...\"\n        style=\"width: 30px; height: 30px;\"\n      />\n      <figcaption\n        class=\"figure-caption badge badge-success\"\n        style=\"margin-left: 25px;\"\n      >\n        {{ username }}\n      </figcaption>\n    </figure>\n  </div>\n  <div>\n    <a class=\"undo\" (click)=\"startUndoProcess()\">Undo Last Change</a>\n  </div>\n  <div [hidden]=\"toggleBannerDisplay\">\n    <button\n      class=\"btn btn-outline-dark\"\n      (click)=\"showLoggedInUsersTask(userId)\"\n    >\n      My Tasks\n    </button>\n    <span class=\"displayBanner\"\n      >Currently showing Tasks for {{ selectedFriendName }}</span\n    >\n  </div>\n  <button\n    type=\"button\"\n    class=\"btn btn-success\"\n    style=\"margin-top: 20px;\"\n    (click)=\"showOnlineUsers()\"\n  >\n    Online Users\n    <span class=\"badge badge-light\" *ngIf=\"onlineUser\">{{\n      onlineUser.length || 0\n    }}</span>\n  </button>\n  <button\n    type=\"button\"\n    class=\"btn btn-dark\"\n    style=\"margin-top: 20px; margin-left: 5px;\"\n    (click)=\"showFriendList()\"\n  >\n    Friend List\n    <span class=\"badge badge-light\" *ngIf=\"friendList\">{{\n      friendList.length || 0\n    }}</span>\n  </button>\n  <app-online-users\n    [hidden]=\"toggleOnlineUser\"\n    [userId]=\"userId\"\n    [username]=\"username\"\n    [usersFriend]=\"usersFriendList\"\n    (onlineUsers)=\"setOnlineUsers($event)\"\n  ></app-online-users>\n  <app-friend-list\n    [hidden]=\"toggleFriendList\"\n    [userId]=\"userId\"\n    [username]=\"username\"\n    (friends)=\"setFriendList($event)\"\n    (selectedFriend)=\"getFriendsItems($event)\"\n    (reloadTaskList)=\"reloadFriendlyUpdates($event)\"\n  ></app-friend-list>\n  <div>\n    <div class=\"row\">\n      <div class=\"col-md-5 mt-4\" *ngFor=\"let list of taskLists\" #scrollBar>\n        <div class=\"card\" style=\"width: 22rem;\">\n          <div class=\"card-header\">\n            {{ list.name }}\n            <span class=\"taskListHeader\">\n              <img\n                class=\"add\"\n                src=\"/assets/addtaskicon.png\"\n                (click)=\"open(createModal, 'New Task', list.taskListId)\"\n              />\n              <img\n                class=\"add\"\n                src=\"/assets/removetaskicon.png\"\n                (click)=\"deleteTaskList(list.taskListId)\"\n              />\n              <img\n                class=\"add\"\n                src=\"/assets/edit.png\"\n                (click)=\"\n                  openEdit(\n                    editModal,\n                    'Edit TaskList',\n                    list.taskListId,\n                    list.name\n                  )\n                \"\n              />\n            </span>\n          </div>\n          <app-tasks\n            [taskListId]=\"list.taskListId\"\n            [userId]=\"list.userId\"\n            [loggedInUser]=\"userId\"\n            [flagOperationForFriend]=\"flagDisplayingFriendsItem\"\n            (notify)=\"openCreateSubTaskForm($event, createModal)\"\n            (delete)=\"deleteTask($event)\"\n            (edit)=\"editTask($event, editModal)\"\n            (editSTask)=\"editSubTask($event, editModal)\"\n            (notifyForSTaskDelete)=\"notifyFriendsSTaskDelete($event)\"\n          >\n          </app-tasks>\n        </div>\n      </div>\n\n      <!-- Create Modal -->\n      <ng-template #createModal let-modal>\n        <div class=\"modal-header\">\n          <h4 class=\"modal-title\" id=\"modal-create\">\n            You are creating...\n          </h4>\n        </div>\n        <div class=\"modal-body\">\n          <app-create-task\n            [operationName]=\"operationName\"\n            [taskListId]=\"selectedTaskListId\"\n            [userId]=\"selectedUserId\"\n            [taskId]=\"selectedTaskId\"\n            [loggedInUser]=\"userId\"\n            [username]=\"username\"\n            [flagOperationForFriend]=\"flagDisplayingFriendsItem\"\n            [usersFriend]=\"usersFriendList\"\n            (notifyNewTaskList)=\"addNewTaskList($event)\"\n            (notifyNewTask)=\"addNewTask($event)\"\n            (notifyNewSubTask)=\"addNewSubTask($event)\"\n            (closeModal)=\"modal.close()\"\n          ></app-create-task>\n        </div>\n        <div class=\"modal-footer\">\n          <button\n            type=\"button\"\n            class=\"btn btn-outline-dark\"\n            (click)=\"modal.close('Save click')\"\n          >\n            Done?\n          </button>\n        </div>\n      </ng-template>\n      <!-- Edit Modal -->\n      <ng-template #editModal let-modal>\n        <div class=\"modal-header\">\n          <h4 class=\"modal-title\" id=\"modal-edit\">\n            You are editing...\n          </h4>\n        </div>\n        <div class=\"modal-body\">\n          <app-edit-task\n            [operationName]=\"operationName\"\n            [taskListId]=\"selectedTaskListId\"\n            [userId]=\"selectedUserId\"\n            [taskId]=\"selectedTaskId\"\n            [subTaskId]=\"selectedSubTaskId\"\n            [name]=\"selectedTaskName\"\n            [status]=\"selectedTaskStatus\"\n            [selectTasksList]=\"selectTasksList\"\n            [selectTasks]=\"selectTasks\"\n            [loggedInUser]=\"userId\"\n            [username]=\"username\"\n            [flagOperationForFriend]=\"flagDisplayingFriendsItem\"\n            [usersFriend]=\"usersFriendList\"\n            (notifyEditTaskList)=\"editTaskLists($event)\"\n            (notifyEditTask)=\"postEditTask($event)\"\n            (notifyEditSubTask)=\"postEditSubTask($event)\"\n            (closeModal)=\"modal.close()\"\n          ></app-edit-task>\n        </div>\n        <div class=\"modal-footer\">\n          <button\n            type=\"button\"\n            class=\"btn btn-outline-dark\"\n            (click)=\"modal.close('Save click')\"\n          >\n            Done?\n          </button>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n  <div class=\"loadtasks\" [hidden]=\"toggleLoadMoreTasks\">\n    <span class=\"badge badge-pill badge-danger\" (click)=\"loadMoreTaskList()\"\n      >load more task lists...</span\n    >\n  </div>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { TasklistService } from '../../task/tasklist.service';\nimport { ToastConfig, Toaster } from 'ngx-toast-notifications';\nimport { MultiUserService } from '../../multiuser/multi-user.service';\n@Component({\n  selector: 'app-tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['./tasks.component.css'],\n})\nexport class TasksComponent implements OnInit {\n  @Input() taskListId: any;\n  @Input() userId: any;\n  @Input() name: any;\n  @Input() loggedInUser: any;\n  @Input() flagOperationForFriend: any;\n  //component will emitt\n  @Output()\n  notify: EventEmitter<String> = new EventEmitter<String>();\n  @Output()\n  delete: EventEmitter<String> = new EventEmitter<String>();\n  @Output()\n  edit: EventEmitter<String> = new EventEmitter<String>();\n  @Output()\n  editSTask: EventEmitter<String> = new EventEmitter<String>();\n  @Output()\n  notifyForSTaskDelete: EventEmitter<String> = new EventEmitter<String>();\n\n  public tasks: [Object];\n  public toggleCreateTaskForm: Boolean = false;\n  constructor(\n    private taskService: TasklistService,\n    private _toast: Toaster,\n    private multiUserService: MultiUserService\n  ) {}\n  ngOnInit(): void {\n    this.getAllTask(this.taskListId, this.userId);\n  }\n  public getAllTask(taskListId, userId): any {\n    let taskInfo = {\n      taskListId: this.taskListId,\n      userId: this.userId,\n    };\n    //console.debug('input:', taskInfo);\n    this.taskService.getTasks(taskInfo).subscribe(\n      (response) => {\n        console.debug('get all task res::', response.message);\n        /**updated tasks */\n        this.tasks = response.data;\n        //console.debug('All tasks::', this.tasks);\n      },\n      (error) => {\n        console.warn('Error::', error.error);\n      }\n    );\n  }\n  /**toggle create task pop up */\n  public openCreateTaskForm(taskListId): any {\n    this.toggleCreateTaskForm = !this.toggleCreateTaskForm;\n    console.debug('Tasklist id after popup::', taskListId);\n    this.taskListId = taskListId;\n  }\n  /**Reload tasklist post task new create */\n  public addNewTask(newTask): any {\n    console.debug('newtask in task component::', newTask);\n    return this.tasks.push(newTask);\n  }\n  /**emitt subtask creation */\n  public emitSubTaskCreation(taskId): any {\n    console.debug('Emit creation');\n    this.notify.emit(taskId);\n  }\n  /**emit subtask deletion */\n  public emitTaskDeletion(taskId, taskListId, userId): any {\n    console.debug('Emit deletetion', taskId, taskListId, userId);\n    this.delete.emit(`${taskId}:${taskListId}:${userId}`);\n  }\n  /**emit edit subtask*/\n  public editSubTask(values, taskListId): any {\n    console.debug('Emit edit subtask:', values);\n    this.editSTask.emit(`${values}:${taskListId}`);\n  }\n  /**emit edit task event */\n  public emitEditTask(taskId, name, taskListId, status): any {\n    console.debug('Emit edit task::', taskId, name, taskListId);\n    this.edit.emit(`${taskId}:${name}:${taskListId}:${status}`);\n  }\n  /**delete sub task */\n  public deleteSubTask(values): any {\n    console.debug('Delete task listeners::', values, this.userId);\n    /**call delete service */\n    let [taskId, subTaskId] = values.split(':');\n    console.debug(subTaskId, taskId);\n    let taskInfo = {\n      subTaskId: subTaskId,\n      taskId: taskId,\n      operation: 'delete',\n      userId: this.userId,\n    };\n    this.taskService.updateSubTask(taskInfo).subscribe(\n      (response) => {\n        console.debug('Delete api reponse::', response);\n        /**success toast  */\n        this._toast.open({ text: response.message, type: 'success' });\n        /**refresh for specific user */\n        let refreshUserId;\n        if (this.flagOperationForFriend) {\n          refreshUserId = this.userId;\n        } else {\n          refreshUserId = this.loggedInUser;\n        }\n        console.debug('refreshing for::', refreshUserId);\n        this.getAllTask(refreshUserId, taskId);\n        this.notifyForSTaskDelete.emit();\n      },\n      (error) => {\n        console.debug('Error Deleting Task::', error.error);\n        this._toast.open({ text: error.error.message, type: 'danger' });\n      }\n    );\n  }\n}\n","<ul class=\"list-group\">\n  <li class=\"list-group-item\" *ngFor=\"let task of tasks\">\n    <span class=\"task\">{{ task.name }}</span>\n    <span class=\"taskHeader\">\n      <img\n        class=\"add\"\n        src=\"/assets/addtaskicon.png\"\n        (click)=\"emitSubTaskCreation(task.taskId)\"\n      /><img\n        class=\"add\"\n        src=\"/assets/removetaskicon.png\"\n        (click)=\"emitTaskDeletion(task.taskId, task.taskListId, task.userId)\"\n      />\n      <img\n        class=\"add\"\n        src=\"/assets/edit.png\"\n        (click)=\"\n          emitEditTask(task.taskId, task.name, task.taskListId, task.status)\n        \"\n      />\n    </span>\n    <app-subtasks\n      [taskId]=\"task.taskId\"\n      [userId]=\"userId\"\n      (delete)=\"deleteSubTask($event)\"\n      (edit)=\"editSubTask($event, task.taskListId)\"\n    ></app-subtasks>\n  </li>\n</ul>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastConfig, Toaster } from 'ngx-toast-notifications';\nimport { UserService } from '../user.service';\nimport { Cookie } from 'ng2-cookies';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n  public email: String;\n  public password: String;\n  public loginResponse: String;\n\n  constructor(\n    private userService: UserService,\n    private _router: Router,\n    private toaster: Toaster\n  ) {}\n\n  ngOnInit(): void {}\n\n  //login\n  public loginUser(): any {\n    let userData = {\n      email: this.email,\n      password: this.password,\n    };\n    this.userService.loginService(userData).subscribe(\n      /**Handle sucess */\n      (response) => {\n        console.debug('Login service res', response);\n        this.loginResponse = response.message;\n\n        /**get user info from response and store as cookie for auth*/\n        const { firstName, lastName, email, userId, authToken } = response.data;\n        Cookie.set('name', firstName + ' ' + lastName);\n        Cookie.set('authToken', authToken);\n        Cookie.set('email', email);\n        Cookie.set('userId', userId);\n\n        /**Set to localstorage */\n        this.userService.setAuthenticatedUser(response.data);\n\n        /**toast sucess */\n        this.toaster.open({ text: response.message, type: 'success' });\n\n        /**Redirect to TASK View */\n        setTimeout(() => this._router.navigate(['/taskList']), 3000);\n      },\n      /**handle errors */\n      (error) => {\n        console.warn('Error Login', error);\n        this.loginResponse = error.error.message;\n        this.toaster.open({ text: 'Login error', type: 'danger' });\n      }\n    );\n  }\n}\n","<div class=\"container\">\n  <div class=\"loginbox\">\n    <img src=\"/assets/loginUser.png\" />\n    <form #loginForm=\"ngForm\" (ngSubmit)=\"loginUser()\">\n      <div class=\"form-group\">\n        <label for=\"email\">Email</label>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          name=\"email\"\n          required\n          [(ngModel)]=\"email\"\n          #_email=\"ngModel\"\n        />\n        <div\n          [hidden]=\"_email.valid || _email.pristine\"\n          class=\"alert alert-danger\"\n        >\n          Email is Required\n        </div>\n\n        <label for=\"password\">Password</label>\n        <input\n          class=\"form-control\"\n          name=\"password\"\n          type=\"password\"\n          required\n          [(ngModel)]=\"password\"\n          #_pwd=\"ngModel\"\n        />\n        <div [hidden]=\"_pwd.valid || _pwd.pristine\" class=\"alert alert-danger\">\n          Password Is required\n        </div>\n        <button class=\"mt-2\" [disabled]=\"!loginForm.form.valid\">Login</button>\n        <button class=\"ml-2\" [routerLink]=\"['/home']\">Cancel</button>\n\n        <div class=\"recover\">\n          <a\n            class=\"mt-10 alert-link\"\n            style=\"color: #020302;\"\n            [routerLink]=\"['/recoverPassword']\"\n            >RecoverPassword\n          </a>\n        </div>\n        <blockquote class=\"blockquote text-right\">\n          <footer class=\"blockquote-footer\">\n            <a\n              class=\"mt-10 alert-link\"\n              style=\"color: #608b60;\"\n              [routerLink]=\"['/home']\"\n              >Back To <cite title=\"Source Title\">Home</cite></a\n            >\n          </footer>\n        </blockquote>\n      </div>\n      <div class=\"loginMessage\">{{ loginResponse }}</div>\n    </form>\n  </div>\n</div>\n<router-outlet></router-outlet>\n","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../user.service';\nimport { ToastConfig, Toaster } from 'ngx-toast-notifications';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-recoverpassword',\n  templateUrl: './recoverpassword.component.html',\n  styleUrls: ['./recoverpassword.component.css'],\n})\nexport class RecoverpasswordComponent implements OnInit {\n  /**define fields */\n  public email: String;\n  public validEmail: Boolean;\n  public recoveryMessage: String;\n  public showResetPassword: Boolean;\n  public hideRecoveryDiv: Boolean = false;\n  public code: String;\n  public password: String;\n  public cfnpassword: String;\n  public equalPwd: Boolean = false;\n  public acceptedPwd: Boolean = false;\n  public resetResponse: String;\n  public loadSpinner: Boolean = false;\n  public loadMessage: String;\n  constructor(\n    private _userService: UserService,\n    private _toaster: Toaster,\n    private _router: Router\n  ) {}\n\n  ngOnInit(): void {\n    /**Validate password */\n  }\n  /**compare password */\n  public comparePassword(): Boolean {\n    this.equalPwd = this.password === this.cfnpassword;\n    return this.equalPwd;\n  }\n  public validatePassword(): Boolean {\n    let pattern = new RegExp('^[A-Za-z0-9]\\\\w{8,64}$');\n    if (this.password === undefined) return true;\n    this.acceptedPwd = pattern.test(this.password.toString());\n    return this.acceptedPwd;\n  }\n  /**send Recovery code */\n  public sendRecoveryCode(): any {\n    let user = {\n      email: this.email,\n    };\n    console.debug('Send recovery ccode-service call', user);\n    /**Switch on loader */\n    this.loadSpinner = true;\n    this.loadMessage = 'Sending Email...';\n    this._userService.recoverPassword(user).subscribe(\n      (response) => {\n        console.debug('Recovery response', response);\n        /**Toast */\n        /**Switch off loader */\n        this.loadSpinner = false;\n        this._toaster.open({ text: response.message, type: 'success' });\n        this.recoveryMessage = response.data.Operation;\n        if (response.status === 200) this.showResetPassword = true;\n      },\n      (error) => {\n        console.warn('Error', error.error);\n        this._toaster.open({ text: error.error.message, type: 'danger' });\n      }\n    );\n  }\n  /**Reset Password */\n  public resetPassword(): any {\n    console.debug('reset Password');\n    let resetInfo = {\n      email: this.email,\n      recoveryCode: this.code,\n      password: this.password,\n    };\n    /**Switch on loader */\n    this.loadSpinner = true;\n    this.loadMessage = 'Resetting Password....';\n    this._userService.resetPassword(resetInfo).subscribe(\n      (response) => {\n        console.debug('reset api res', response);\n        /**Switch off loader */\n        this.loadSpinner = false;\n\n        /**Compose sucess message */\n        this.resetResponse = `${response.message}-Redirecting to Login...`;\n\n        /**Toast sucess */\n        this._toaster.open({ text: response.message, type: 'success' });\n\n        /**hide the recovery div */\n        if (response.status === 200) this.hideRecoveryDiv = true;\n\n        /**Rediret to login */\n        setTimeout(() => this._router.navigate(['/login']), 3000);\n      },\n      (error) => {\n        console.warn('Error', error.error);\n        this.resetResponse = error.error.message;\n        this._toaster.open({ text: error.error.message, type: 'danger' });\n      }\n    );\n  }\n}\n","<div class=\"container recovery\">\n  <h3>Recover Password</h3>\n  <p>\n    A <strong>Recovery Code</strong> will be sent to your registered email. Use\n    the code to reset your password\n  </p>\n  <div class=\"loader\" [hidden]=\"!loadSpinner\">{{ loadMessage }}</div>\n  <div class=\"recoveryForm\" [hidden]=\"showResetPassword\">\n    <form #recoveryform=\"ngForm\" (ngSubmit)=\"sendRecoveryCode()\">\n      <label for=\"recoveryEmail\">Recovery Email</label>\n      <input\n        type=\"email\"\n        class=\"form-control\"\n        required\n        placeholder=\"email\"\n        name=\"email\"\n        [(ngModel)]=\"email\"\n        #_email=\"ngModel\"\n      />\n      <div\n        [hidden]=\"_email.valid || _email.pristine\"\n        class=\"alert alert-danger\"\n      >\n        Email is required\n      </div>\n      <button class=\"mt-2\" [disabled]=\"!recoveryform.form.valid\">\n        Send Code\n      </button>\n      <button class=\"ml-2\" [routerLink]=\"['/home']\">Cancel</button>\n    </form>\n  </div>\n  <div>{{ recoveryMessage }}</div>\n  <div [hidden]=\"!showResetPassword\">\n    <h2>Enter Recovery Code</h2>\n    <form #resetform=\"ngForm\" (ngSubmit)=\"resetPassword()\">\n      <input\n        type=\"text\"\n        required\n        class=\"form-control\"\n        name=\"code\"\n        placeholder=\"recovery code\"\n        [(ngModel)]=\"code\"\n        #_code=\"ngModel\"\n      />\n      <div [hidden]=\"_code.valid || _code.pristine\" class=\"alert alert-danger\">\n        Code Is Required\n      </div>\n      <input\n        type=\"password\"\n        required\n        class=\"form-control\"\n        placeholder=\"password\"\n        name=\"password\"\n        [(ngModel)]=\"password\"\n        (click)=\"validatePassword()\"\n        #_pwd=\"ngModel\"\n      />\n      <div [hidden]=\"_pwd.valid || _pwd.pristine\" class=\"alert alert-danger\">\n        Password Is required\n      </div>\n      <div [hidden]=\"validatePassword()\" class=\"alert alert-danger\">\n        Password should be alphanumeric and of min length 8\n      </div>\n      <input\n        class=\"form-control mt-1\"\n        type=\"password\"\n        placeholder=\"confirm password\"\n        required\n        name=\"cfnpassword\"\n        [(ngModel)]=\"cfnpassword\"\n        (click)=\"validatePassword()\"\n        #_cpwd=\"ngModel\"\n      />\n      <div [hidden]=\"comparePassword()\" class=\"alert alert-danger\">\n        Password doesn't match\n      </div>\n      <button\n        class=\"mt-2\"\n        [disabled]=\"!resetform.form.valid || !acceptedPwd || !equalPwd\"\n      >\n        Reset Password\n      </button>\n      <div>{{ resetResponse }}</div>\n    </form>\n  </div>\n</div>\n<router-outlet></router-outlet>\n","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../user.service';\nimport { ToastConfig, Toaster } from 'ngx-toast-notifications';\nimport { Router } from '@angular/router';\nimport lookup from 'country-code-lookup';\nimport n from 'country-js';\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css'],\n})\nexport class SignupComponent implements OnInit {\n  /**Define fields */\n  public firstName: String;\n  public lastName: String;\n  public email: String;\n  public mobile: String;\n  public password: String;\n  public cfnpassword: String;\n  public equalPwd: Boolean = false;\n  public acceptedPwd: Boolean = false;\n  public signUpResponse: String;\n  public countriesArray = [];\n  public countries = [];\n  public country: String;\n  public countrycode: any;\n  public ctr: String = 'country';\n  public passwordError: String;\n  constructor(\n    private userService: UserService,\n    private _router: Router,\n    private _toaster: Toaster\n  ) {\n    this.passwordError = `Password should have at least 1 Lowercase,Uppercase,Special\n    Character & of min length 8 `;\n  }\n\n  ngOnInit(): void {\n    /**Compute list of countries */\n    Object.entries(lookup.countries).map((entry) =>\n      this.countriesArray.push(entry[1])\n    );\n    this.countriesArray.map((ctr) => {\n      this.countries.push(ctr.country);\n    });\n  }\n  public selectCountryCode(value): any {\n    //console.debug('select code:', `+${n.search(value)[0].phone}`);\n    this.countrycode = `+${n.search(value)[0].phone}`;\n    //console.debug('cc::', this.countrycode);\n    this.mobile = this.countrycode;\n  }\n  /**compare password */\n  public comparePassword(): Boolean {\n    this.equalPwd = this.password === this.cfnpassword;\n    return this.equalPwd;\n  }\n  public validatePassword(): Boolean {\n    let pattern = new RegExp(\n      '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})'\n    );\n    if (this.password === undefined) return true;\n    this.acceptedPwd = pattern.test(this.password.toString());\n    return this.acceptedPwd;\n  }\n  /**Signup function */\n  public signUpUser(): any {\n    console.debug('Signup user');\n    let newuser = {\n      firstName: this.firstName,\n      lastName: this.lastName,\n      email: this.email,\n      mobile: this.mobile,\n      password: this.password,\n    };\n    this.userService.signUpService(newuser).subscribe(\n      (response) => {\n        console.debug('Sign up response', response);\n        if (\n          response.status === 400 &&\n          response.data[0] === 'Invalid Password'\n        ) {\n          this.signUpResponse = this.passwordError;\n        }\n        if (response.status === 200) {\n          this.signUpResponse = `${response.message}, Redirecting to Login`;\n          /**Toast sucess */\n          this._toaster.open({ text: response.message, type: 'success' });\n          /**Route to Login page */\n          setTimeout(() => this._router.navigate(['/login']), 2000);\n        }\n      },\n      (error) => {\n        console.warn('SignUpError', error.error);\n        console.debug('error_msg', error.error.message);\n        this.signUpResponse = error.error.message;\n        this._toaster.open({ text: error.error.message, type: 'danger' });\n      }\n    );\n  }\n}\n","<div class=\"container\">\n  <h3>Register</h3>\n  <div class=\"signupbox\">\n    <form #signUpForm=\"ngForm\" (ngSubmit)=\"signUpUser()\">\n      <input\n        class=\"form-control\"\n        type=\"text\"\n        name=\"firstname\"\n        placeholder=\"Enter FirstName\"\n        required\n        [(ngModel)]=\"firstName\"\n        #_fname=\"ngModel\"\n      />\n      <div\n        [hidden]=\"_fname.valid || _fname.pristine\"\n        class=\"alert alert-danger\"\n      >\n        FirstName is required\n      </div>\n      <input\n        class=\"form-control mt-1\"\n        type=\"text\"\n        name=\"lastname\"\n        placeholder=\"Enter LastName\"\n        required\n        [(ngModel)]=\"lastName\"\n        #_lname=\"ngModel\"\n      />\n      <div\n        [hidden]=\"_lname.valid || _lname.pristine\"\n        class=\"alert alert-danger\"\n      >\n        LastName is Required\n      </div>\n      <input\n        class=\"form-control mt-1\"\n        type=\"email\"\n        placeholder=\"Enter Valid Email\"\n        required\n        name=\"email\"\n        [(ngModel)]=\"email\"\n        #_email=\"ngModel\"\n      />\n      <div\n        [hidden]=\"_email.valid || _email.pristine\"\n        class=\"alert alert-danger\"\n      >\n        Email is required for login and password recovery\n      </div>\n      <select\n        class=\"form-control mt-1\"\n        #ctry\n        required\n        [(ngModel)]=\"country\"\n        name=\"country\"\n        #_country=\"ngModel\"\n        (change)=\"selectCountryCode(ctry.value)\"\n      >\n        <option *ngFor=\"let cntry of countries\" [value]=\"cntry\">{{\n          cntry\n        }}</option>\n      </select>\n      <input\n        class=\"form-control mt-1\"\n        type=\"text\"\n        placeholder=\"Mobile\"\n        required\n        name=\"mobile\"\n        [(ngModel)]=\"mobile\"\n        #_mob=\"ngModel\"\n      />\n      <div [hidden]=\"_mob.valid || _mob.pristine\" class=\"alert alert-danger\">\n        Mobile is required\n      </div>\n      <input\n        class=\"form-control mt-1\"\n        type=\"password\"\n        placeholder=\"password\"\n        required\n        name=\"password\"\n        [(ngModel)]=\"password\"\n        #_pwd=\"ngModel\"\n      />\n      <div [hidden]=\"_pwd.valid || _pwd.pristine\" class=\"alert alert-danger\">\n        Password Is required\n      </div>\n      <div [hidden]=\"validatePassword()\" class=\"alert alert-danger\">\n        {{ passwordError }}\n      </div>\n      <input\n        class=\"form-control mt-1\"\n        type=\"password\"\n        placeholder=\"confirm password\"\n        required\n        name=\"cfnpassword\"\n        [(ngModel)]=\"cfnpassword\"\n        #_cpwd=\"ngModel\"\n      />\n      <div [hidden]=\"comparePassword()\" class=\"alert alert-danger\">\n        Password doesn't match\n      </div>\n      <button\n        class=\"mt-2\"\n        [disabled]=\"!signUpForm.form.valid || !acceptedPwd || !equalPwd\"\n      >\n        SignUp\n      </button>\n      <button class=\"ml-2\" [routerLink]=\"['/home']\">Cancel</button>\n    </form>\n    <div\n      class=\"alert alert-warning mt-2\"\n      role=\"alert\"\n      [hidden]=\"!signUpResponse\"\n    >\n      {{ signUpResponse }}\n    </div>\n  </div>\n  <router-outlet></router-outlet>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { SignupComponent } from './signup/signup.component';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule, Routes } from '@angular/router';\nimport { RecoverpasswordComponent } from './recoverpassword/recoverpassword.component';\nimport { UserService } from './user.service';\nimport { MultiuserModule } from '../multiuser/multiuser.module';\n@NgModule({\n  declarations: [LoginComponent, SignupComponent, RecoverpasswordComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    MultiuserModule,\n    RouterModule.forChild([\n      {\n        path: 'recoverPassword',\n        component: RecoverpasswordComponent,\n        pathMatch: 'full',\n      },\n    ]),\n  ],\n  providers: [UserService],\n})\nexport class UserModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError, onErrorResumeNext } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  //initiliaze\n  public baseurl = 'http://localhost:4201/api/v1';\n  constructor(private _http: HttpClient) {}\n\n  //handle exceptions\n  public handleError(error: HttpErrorResponse) {\n    console.error('http Error', error.message);\n    return Observable.throw(error.message);\n  }\n\n  //signup\n  public signUpService(newUser): any {\n    //console.debug('Signup api call', newUser);\n    let signUpRes = this._http.post(`${this.baseurl}/signup`, newUser);\n    return signUpRes;\n  }\n\n  //login\n  public loginService(userData): any {\n    //console.debug('login api call', userData);\n    let loginres = this._http.post(`${this.baseurl}/login`, userData);\n    return loginres;\n  }\n\n  //store authenticated user info\n  public setAuthenticatedUser(data): any {\n    //console.debug('Set auth user info', data);\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  }\n\n  //get authenticated user info\n  public getAutheticatedUserInfo(): any {\n    //console.debug('get autheticated user info');\n    let lc = JSON.parse(localStorage.getItem('userInfo'));\n    //console.debug('lc::', lc);\n    return lc === null ? '' : lc;\n  }\n\n  //recover password\n  public recoverPassword(user): any {\n    //console.debug('Recover password for', user);\n    let recoverPwdRes = this._http.post(\n      `${this.baseurl}/recoverPassword`,\n      user\n    );\n    return recoverPwdRes;\n  }\n\n  //reset Password\n  public resetPassword(user): any {\n    //console.debug('reset password', user);\n    let resetPwdRes = this._http.post(`${this.baseurl}/resetPassword`, user);\n    return resetPwdRes;\n  }\n  //get country\n  public getCountry(): any {\n    //console.debug('get country');\n    let countries = this._http.get('http://country.io/names.json');\n    return countries;\n  }\n  //get country phone code\n  public getCode(): any {\n    //console.debug('get code');\n    let code = this._http.get('http://country.io/phone.json');\n    return code;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"]}